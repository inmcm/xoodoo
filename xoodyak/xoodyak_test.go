package xoodyak

import (
	"bytes"
	"encoding/binary"
	"testing"

	"github.com/inmcm/xoodoo/xoodoo"

	"github.com/stretchr/testify/assert"
)

var xoodyakInstantiationTestTable = []struct {
	key     []byte
	id      []byte
	counter []byte
	xk      Xoodyak
}{
	// Hash mode initialization
	{
		key:     []byte{},
		id:      []byte{},
		counter: []byte{},
		xk: Xoodyak{
			Instance: &xoodoo.Xoodoo{
				State: xoodoo.State{},
			},
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  xoodyakHashIn,
			SqueezeSize: xoodyakHashIn,
		},
	},
}

func TestXoodyakCyclistInstantiate(t *testing.T) {
	for _, tt := range xoodyakInstantiationTestTable {
		gotXk := Instantiate(tt.key, tt.id, tt.counter)
		assert.Equal(t, tt.xk.Instance.Bytes(), gotXk.Instance.Bytes())
		assert.Equal(t, tt.xk.Mode, gotXk.Mode)
		assert.Equal(t, tt.xk.Phase, gotXk.Phase)
		assert.Equal(t, tt.xk.AbsorbSize, gotXk.AbsorbSize)
		assert.Equal(t, tt.xk.SqueezeSize, gotXk.SqueezeSize)
	}
}

var xoodyakCyclistDownTestTable = []struct {
	startState [48]byte
	xi         []byte
	cd         byte
	endState   []byte
}{
	{
		startState: [48]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		xi:         []byte{},
		cd:         0x3,
		endState:   []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
	},
	{
		startState: [48]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		xi:         []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		cd:         0x3,
		endState:   []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
	},
	{
		startState: [48]byte{0x9E, 0xA6, 0x95, 0x34, 0x7C, 0xDD, 0xDF, 0xF9, 0xBC, 0x63, 0xEC, 0xE3, 0x0F, 0xE2, 0x31, 0x44, 0x4C, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		xi:         []byte{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
		cd:         0x0,
		endState:   []byte{0x8E, 0xB7, 0x87, 0x27, 0x68, 0xC8, 0xC9, 0xEE, 0xA4, 0x7A, 0xF6, 0xF8, 0x13, 0xFF, 0x2F, 0x5B, 0x4D, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
	},
	{
		startState: [48]byte{0xCE, 0xBE, 0x4A, 0xFF, 0x9E, 0xAC, 0x22, 0x18, 0x01, 0x7D, 0xDA, 0x5F, 0x82, 0x07, 0xBA, 0x83, 0x26, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		xi:         []byte{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F},
		cd:         0x0,
		endState:   []byte{0xEE, 0x9F, 0x68, 0xDC, 0xBA, 0x89, 0x04, 0x3F, 0x29, 0x54, 0xF0, 0x74, 0xAE, 0x2A, 0x94, 0xAC, 0x27, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
	},
	{
		startState: [48]byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		xi:         []byte{},
		cd:         0x0,
		endState:   []byte{0x8B, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
	},

	{
		startState: [48]byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		xi:         []byte{},
		cd:         0x0,
		endState:   []byte{0xEB, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
	},
}

func BenchmarkXoodyakCyclistDown(b *testing.B) {
	var newXd xoodoo.Xoodoo
	var newXk Xoodyak
	newXk.Instance = &newXd
	newXk.Mode = Hash
	newXk.Phase = Down
	input := make([]byte, 16)
	for n := 0; n < b.N; n++ {
		newXk.Down(input, 0x03)
	}
}

func TestXoodyakCyclistDown(t *testing.T) {
	for _, tt := range xoodyakCyclistDownTestTable {
		var newXd xoodoo.Xoodoo
		var newXk Xoodyak
		newXk.Instance = &newXd
		buf := bytes.NewReader(tt.startState[:])
		binary.Read(buf, binary.LittleEndian, &newXk.Instance.State)
		newXk.Mode = Hash
		newXk.Phase = Down
		newXk.Down(tt.xi, tt.cd)
		gotBytes := newXk.Instance.Bytes()
		assert.Equal(t, tt.endState, gotBytes)
	}
}

func TestXoodyakCyclistDownPanic(t *testing.T) {
	var newXd xoodoo.Xoodoo
	var newXk Xoodyak
	newXk.Instance = &newXd
	newXk.Mode = Hash
	newXk.Phase = Down
	input := make([]byte, 200)
	downPanic := func() {
		newXk.Down(input, 0x00)
	}
	assert.Panics(t, downPanic)

}

var xoodyakCyclistUpTestTable = []struct {
	startState [48]byte
	cu         byte
	yilen      uint
	endState   [48]byte
	yiOut      []byte
}{

	{
		startState: [48]byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		cu:         0x00,
		endState:   [48]byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		yilen:      16,
		yiOut:      []byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B},
	},

	{
		startState: [48]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		cu:         0x00,
		endState:   [48]byte{0x9E, 0xA6, 0x95, 0x34, 0x7C, 0xDD, 0xDF, 0xF9, 0xBC, 0x63, 0xEC, 0xE3, 0x0F, 0xE2, 0x31, 0x44, 0x4C, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		yilen:      0,
		yiOut:      []byte{},
	},
	{
		startState: [48]byte{0x8E, 0xB7, 0x87, 0x27, 0x68, 0xC8, 0xC9, 0xEE, 0xA4, 0x7A, 0xF6, 0xF8, 0x13, 0xFF, 0x2F, 0x5B, 0x4D, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		cu:         0x0,
		endState:   [48]byte{0xCE, 0xBE, 0x4A, 0xFF, 0x9E, 0xAC, 0x22, 0x18, 0x01, 0x7D, 0xDA, 0x5F, 0x82, 0x07, 0xBA, 0x83, 0x26, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		yilen:      0,
		yiOut:      []byte{},
	},
	{
		startState: [48]byte{0xEE, 0x9F, 0x68, 0xDC, 0xBA, 0x89, 0x04, 0x3F, 0x29, 0x54, 0xF0, 0x74, 0xAE, 0x2A, 0x94, 0xAC, 0x27, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		cu:         0x0,
		endState:   [48]byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		yilen:      16,
		yiOut:      []byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95},
	},
	{
		startState: [48]byte{0x8B, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		cu:         0x0,
		endState:   [48]byte{0x3F, 0xF2, 0x4E, 0x0E, 0x3E, 0x99, 0x7D, 0xE4, 0x49, 0x33, 0xDE, 0x4A, 0xB8, 0xE5, 0x22, 0x6B, 0x1F, 0x7E, 0xC8, 0x12, 0x50, 0x55, 0x86, 0x8E, 0xEE, 0x09, 0xC1, 0xD0, 0xF6, 0x5B, 0x55, 0xAC, 0x6E, 0xF7, 0x79, 0x5D, 0x5D, 0xA2, 0xBF, 0xFF, 0x21, 0xE6, 0x65, 0xEE, 0xEF, 0xDF, 0x10, 0x35},
		yilen:      16,
		yiOut:      []byte{0x3F, 0xF2, 0x4E, 0x0E, 0x3E, 0x99, 0x7D, 0xE4, 0x49, 0x33, 0xDE, 0x4A, 0xB8, 0xE5, 0x22, 0x6B},
	},

	{
		startState: [48]byte{0xEB, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		cu:         0x0,
		endState:   [48]byte{0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1, 0x14, 0x51, 0xD6, 0x8A, 0x68, 0x9A, 0xED, 0x7A, 0x7B, 0x7E, 0x8F, 0x71, 0xDD, 0x0F, 0xAD, 0x14, 0xFB, 0x15, 0xDC, 0x3B, 0x27, 0x45, 0xF9, 0x44, 0x75, 0x3E, 0xA2, 0xC1, 0x80, 0x36, 0xDE, 0x1F},
		yilen:      16,
		yiOut:      []byte{0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1},
	},
}

func BenchmarkXoodyakCyclistUp(b *testing.B) {
	newXd, _ := xoodoo.NewXoodoo(12, [48]byte{})
	var newXk Xoodyak
	newXk.Instance = newXd
	newXk.Mode = Hash
	newXk.Phase = Up
	for n := 0; n < b.N; n++ {
		newXk.Up(0x00, 16)
	}
}

func TestXoodyakCyclistUp(t *testing.T) {
	for _, tt := range xoodyakCyclistUpTestTable {
		newXd, _ := xoodoo.NewXoodoo(12, tt.startState)
		var newXk Xoodyak
		newXk.Instance = newXd
		newXk.Mode = Hash
		newXk.Phase = Up
		gotyi := newXk.Up(tt.cu, tt.yilen)
		assert.Equal(t, tt.yiOut, gotyi)
	}
}

func TestXoodyakCyclistUpPanic(t *testing.T) {
	var newXd xoodoo.Xoodoo
	var newXk Xoodyak
	newXk.Instance = &newXd
	newXk.Mode = Hash
	newXk.Phase = Down
	upPanic := func() {
		newXk.Up(0x80, 200)
	}
	assert.Panics(t, upPanic)

}

var xoodyakCyclistAbsorbAnyTestTable = []struct {
	x     []byte
	r     uint
	cd    uint8
	xdIn  [48]byte
	xkIn  Xoodyak
	xdOut []byte
	xkOut Xoodyak
}{
	{
		x:    []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30},
		r:    xoodyakHashIn,
		cd:   0x03,
		xdIn: [48]byte{},
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  xoodyakHashIn,
			SqueezeSize: xoodyakHashIn,
		},
		xdOut: []byte{0xBA, 0x76, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		xkOut: Xoodyak{
			Mode:  Hash,
			Phase: Down,
		},
	},
	{
		x:    []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D},
		r:    xoodyakHashIn,
		cd:   0x03,
		xdIn: [48]byte{},
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  xoodyakHashIn,
			SqueezeSize: xoodyakHashIn,
		},
		xdOut: []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		xkOut: Xoodyak{
			Mode:  Hash,
			Phase: Down,
		},
	},
}

func TestXoodyakCyclistAbsorbAny(t *testing.T) {
	for _, tt := range xoodyakCyclistAbsorbAnyTestTable {
		tt.xkIn.Instance, _ = xoodoo.NewXoodoo(12, tt.xdIn)
		tt.xkIn.AbsorbAny(tt.x, tt.r, tt.cd)
		assert.Equal(t, tt.xdOut, tt.xkIn.Instance.Bytes())
		assert.Equal(t, tt.xkOut.Mode, tt.xkIn.Mode)
		assert.Equal(t, tt.xkOut.Phase, tt.xkIn.Phase)
	}
}

func BenchmarkXoodyakCyclistAbsorbAny(b *testing.B) {
	xk := Instantiate([]byte{}, []byte{}, []byte{})
	in := make([]byte, 32)
	for n := 0; n < b.N; n++ {
		xk.AbsorbAny(in, xoodyakHashIn, AbsorbCdInit)
	}
}

var xoodyakCyclistSqueezeAnyTestTable = []struct {
	xdIn   [48]byte
	YLen   uint
	cu     uint8
	xkIn   Xoodyak
	output []byte
}{
	{
		xdIn: [48]byte{0xBA, 0x76, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		YLen: 32,
		cu:   SqueezeCuInit,
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  xoodyakHashIn,
			SqueezeSize: xoodyakHashIn,
		},
		output: []byte{0xCC, 0xA2, 0x60, 0xC4, 0x94, 0x7D, 0xE5, 0xE6, 0xE1, 0x79, 0x6C, 0xDB, 0xF6, 0xA0, 0xC7, 0xE2, 0xDB, 0xBD, 0x2C, 0xEB, 0x6B, 0x80, 0x06, 0xB7, 0x20, 0xEA, 0x0A, 0x99, 0x61, 0xA3, 0x44, 0x91},
	},
	{
		xdIn: [48]byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		YLen: 32,
		cu:   SqueezeCuInit,
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  xoodyakHashIn,
			SqueezeSize: xoodyakHashIn,
		},
		output: []byte{0x2A, 0x6C, 0x05, 0x77, 0x40, 0xF5, 0xC3, 0xCC, 0xBE, 0x06, 0x34, 0x19, 0x61, 0xAF, 0xFD, 0x0D, 0x88, 0xF5, 0x67, 0xCA, 0x48, 0x22, 0xB9, 0xF2, 0x18, 0x14, 0x20, 0x5D, 0xA7, 0xD3, 0xAA, 0xED},
	},
}

func TestXoodyakCyclistSqueezeAny(t *testing.T) {
	for _, tt := range xoodyakCyclistSqueezeAnyTestTable {
		tt.xkIn.Instance, _ = xoodoo.NewXoodoo(12, tt.xdIn)
		gotOutput := tt.xkIn.SqueezeAny(tt.YLen, tt.cu)
		assert.Equal(t, tt.output, gotOutput)
	}
}

func BenchmarkXoodyakCyclistSqueezeAny(b *testing.B) {
	xk := Xoodyak{
		Mode:        Hash,
		Phase:       Up,
		AbsorbSize:  xoodyakHashIn,
		SqueezeSize: xoodyakHashIn,
	}
	xk.Instance, _ = xoodoo.NewXoodoo(12, [48]byte{})
	for n := 0; n < b.N; n++ {
		xk.SqueezeAny(32, SqueezeCuInit)
	}
}

var xoodyakRatchetTestTable = []struct {
	initial [48]byte
	final   []byte
}{
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA5, 0x4D, 0x15, 0x64, 0x95, 0xDB, 0x31, 0xC1,
			0xC1, 0x04, 0x66, 0xF6, 0x98, 0x86, 0x34, 0x5D,
			0x42, 0x08, 0x98, 0x67, 0x42, 0xCC, 0x7B, 0x5C,
			0x41, 0xA8, 0x41, 0xE3, 0x66, 0x03, 0x0A, 0xE1,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA5, 0x4D, 0x15, 0x64, 0x95, 0xDB, 0x31, 0xC1,
			0xC1, 0x04, 0x66, 0xF6, 0x98, 0x86, 0x34, 0x5D,
			0x42, 0x08, 0x98, 0x67, 0x42, 0xCC, 0x7B, 0x5C,
			0x41, 0xA8, 0x41, 0xE3, 0x66, 0x03, 0x0A, 0xE1,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x93, 0x9F, 0xBC, 0xFC, 0xE3, 0xE8, 0xF2, 0x20,
			0x25, 0x5C, 0xBD, 0x90, 0x02, 0x9D, 0x7D, 0x3B,
			0x74, 0xA9, 0x18, 0x7B, 0x7D, 0xEE, 0xFE, 0x35,
			0x5C, 0x11, 0x61, 0x11, 0xC1, 0xDE, 0x49, 0xE5,
		},
	},
	{
		initial: [48]byte{
			0xBE, 0x6E, 0x37, 0x66, 0x53, 0x34, 0x92, 0xEE,
			0x19, 0x32, 0x73, 0x84, 0xD5, 0xF3, 0x8A, 0x29,
			0xD9, 0x24, 0xFF, 0x14, 0x42, 0x8E, 0x33, 0x4D,
			0x72, 0x49, 0xA8, 0x20, 0xCD, 0x7E, 0xEB, 0xBD,
			0xBF, 0xB1, 0x0D, 0xFA, 0x9F, 0x7D, 0xBC, 0x16,
			0x92, 0x81, 0xD9, 0x37, 0x46, 0x22, 0x5F, 0x52,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x0B, 0x99, 0xEC, 0x1F, 0x09, 0xC7, 0x93,
			0x5C, 0x69, 0x6B, 0x64, 0xA3, 0x89, 0x02, 0x9E,
			0x3D, 0xED, 0xBF, 0x87, 0x89, 0x80, 0x8C, 0x26,
			0xCB, 0xD8, 0x73, 0xCA, 0xFD, 0x53, 0xD6, 0x2D,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x0B, 0x99, 0xEC, 0x1F, 0x09, 0xC7, 0x93,
			0x5C, 0x69, 0x6B, 0x64, 0xA3, 0x89, 0x02, 0x9E,
			0x3D, 0xED, 0xBF, 0x87, 0x89, 0x80, 0x8C, 0x26,
			0xCB, 0xD8, 0x73, 0xCA, 0xFD, 0x53, 0xD6, 0x2D,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xBF, 0xDF, 0xE2, 0x55, 0x83, 0x69, 0x97, 0x39,
			0xC5, 0xF9, 0xA7, 0xF6, 0x99, 0xC0, 0x0E, 0xB2,
			0x0D, 0x88, 0x60, 0x60, 0xF7, 0xB2, 0xEA, 0xDD,
			0x3F, 0xC7, 0x3B, 0x8B, 0x55, 0x7A, 0xC7, 0x3C,
		},
	},

	{
		initial: [48]byte{
			0xE6, 0x11, 0xD6, 0x6D, 0xE0, 0x4F, 0x8F, 0xB0,
			0xC7, 0x28, 0xFF, 0x58, 0xE5, 0x26, 0xB3, 0x3B,
			0xD5, 0x87, 0x5D, 0xE2, 0x13, 0xAE, 0x1D, 0xAC,
			0xE6, 0x12, 0x28, 0xA2, 0xFD, 0x3A, 0x7E, 0x25,
			0x75, 0x6E, 0xB9, 0x7B, 0x32, 0x86, 0x6E, 0x19,
			0x58, 0x91, 0xC1, 0xF3, 0xEB, 0x65, 0x3B, 0x83,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xAD, 0x6F, 0x16, 0xE3, 0x9E, 0x11, 0x89,
			0x9C, 0xF0, 0x76, 0xC4, 0x88, 0x19, 0xED, 0x27,
			0x6E, 0x9C, 0xBB, 0x72, 0x2E, 0x1C, 0x79, 0x79,
			0xA6, 0x87, 0x8D, 0x63, 0x85, 0xCB, 0xA2, 0x14,
		},
	},

	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xAD, 0x6F, 0x16, 0xE3, 0x9E, 0x11, 0x89,
			0x9C, 0xF0, 0x76, 0xC4, 0x88, 0x19, 0xED, 0x27,
			0x6E, 0x9C, 0xBB, 0x72, 0x2E, 0x1C, 0x79, 0x79,
			0xA6, 0x87, 0x8D, 0x63, 0x85, 0xCB, 0xA2, 0x14,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF8, 0x33, 0xB6, 0x96, 0xF4, 0xFD, 0xAF, 0x51,
			0xF8, 0xC7, 0x5E, 0x0D, 0xEC, 0x7D, 0xCB, 0x99,
			0x06, 0x61, 0xBE, 0x61, 0x14, 0xF4, 0x0C, 0xC6,
			0xC6, 0xF6, 0x60, 0x5B, 0x8C, 0xFE, 0xF9, 0x7D,
		},
	},
	{
		initial: [48]byte{
			0x1C, 0xF1, 0xE2, 0xED, 0x0B, 0x61, 0x56, 0x24,
			0x1A, 0x59, 0xC6, 0x4E, 0xB2, 0xEC, 0x00, 0xE0,
			0xB8, 0x35, 0xD6, 0x5D, 0xB9, 0x31, 0x40, 0xD6,
			0x84, 0x7B, 0xC6, 0xAB, 0x07, 0x92, 0xAA, 0x4E,
			0x9B, 0xBB, 0x42, 0x6A, 0xF5, 0x8C, 0xC1, 0x97,
			0xB0, 0x26, 0x7F, 0xC4, 0x08, 0x58, 0x74, 0x99,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0x3F, 0x2A, 0x6C, 0x3F, 0xE8, 0xBD, 0xA9,
			0x27, 0xC4, 0xA7, 0x9C, 0x18, 0xC5, 0xAE, 0x94,
			0xEF, 0x4B, 0xA4, 0x9B, 0x63, 0x58, 0x28, 0xF4,
			0x0C, 0x01, 0xAE, 0xFF, 0xA6, 0xC4, 0x4E, 0xAD,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0x3F, 0x2A, 0x6C, 0x3F, 0xE8, 0xBD, 0xA9,
			0x27, 0xC4, 0xA7, 0x9C, 0x18, 0xC5, 0xAE, 0x94,
			0xEF, 0x4B, 0xA4, 0x9B, 0x63, 0x58, 0x28, 0xF4,
			0x0C, 0x01, 0xAE, 0xFF, 0xA6, 0xC4, 0x4E, 0xAD,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE5, 0x77, 0x8C, 0x55, 0x40, 0x01, 0xE3, 0x99,
			0xFF, 0x58, 0xC0, 0x1B, 0x84, 0x3E, 0xDF, 0x46,
			0xEB, 0xD2, 0xCB, 0xDC, 0x69, 0xA9, 0x15, 0x11,
			0x45, 0x58, 0x2B, 0x15, 0x38, 0x11, 0x34, 0x87,
		},
	},
}

func TestXoodyakRatchet(t *testing.T) {
	for _, tt := range xoodyakRatchetTestTable {
		newXK := Xoodyak{}
		newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, tt.initial)
		newXK.Phase = Up
		newXK.Mode = Keyed
		newXK.AbsorbSize = xoodyakRkIn
		newXK.SqueezeSize = xoodyakRkOut
		newXK.Ratchet()
		assert.Equal(t, tt.final, newXK.Instance.Bytes())
	}
}

func TestXoodyakRatchetWrongMode(t *testing.T) {
	newXK := Xoodyak{}
	newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, [48]byte{})
	newXK.Phase = Up
	newXK.Mode = Hash
	newXK.AbsorbSize = xoodyakRkIn
	newXK.SqueezeSize = xoodyakRkOut
	panicRatchet := func() {
		newXK.Ratchet()
	}
	assert.PanicsWithError(t, "ratchet only available in keyed mode", panicRatchet)
}

var xoodyakSqueezeKeyTestTable = []struct {
	initial [48]byte
	length  uint
	final   []byte
}{
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		length: 16,
		final: []byte{
			0xC9, 0xD2, 0x4C, 0x71, 0xFF, 0x46, 0xF1, 0xA6,
			0x4C, 0x5C, 0x31, 0x73, 0xFD, 0x6D, 0x75, 0xD5,
		},
	},
	{
		initial: [48]byte{
			0xBE, 0x6E, 0x37, 0x66, 0x53, 0x34, 0x92, 0xEE,
			0x19, 0x32, 0x73, 0x84, 0xD5, 0xF3, 0x8A, 0x29,
			0xD9, 0x24, 0xFF, 0x14, 0x42, 0x8E, 0x33, 0x4D,
			0x72, 0x49, 0xA8, 0x20, 0xCD, 0x7E, 0xEB, 0xBD,
			0xBF, 0xB1, 0x0D, 0xFA, 0x9F, 0x7D, 0xBC, 0x16,
			0x92, 0x81, 0xD9, 0x37, 0x46, 0x22, 0x5F, 0x52,
		},
		length: 16,
		final: []byte{
			0x2A, 0xA3, 0x85, 0x58, 0x66, 0x54, 0x71, 0x70,
			0xD6, 0x2E, 0x7F, 0xA6, 0xD6, 0xC1, 0x96, 0x04,
		},
	},

	{
		initial: [48]byte{
			0x2A, 0xA3, 0x85, 0x58, 0x66, 0x54, 0x71, 0x70,
			0xD6, 0x2E, 0x7F, 0xA6, 0xD6, 0xC1, 0x96, 0x04,
			0x0E, 0xBA, 0x9F, 0x29, 0x43, 0x19, 0x06, 0x66,
			0xDD, 0xEF, 0x3D, 0x23, 0x92, 0xD8, 0xD8, 0x07,
			0x78, 0x6C, 0xB8, 0x45, 0x82, 0x05, 0x59, 0x6D,
			0xE4, 0x03, 0x20, 0xCF, 0x26, 0xEF, 0x2E, 0xF9},
		length: 16,
		final: []byte{
			0xD9, 0xAA, 0x55, 0xEF, 0x52, 0xC2, 0xA2, 0xB4,
			0xAF, 0x23, 0x14, 0xF3, 0xDB, 0xBB, 0x54, 0x37,
		},
	},
	{
		initial: [48]byte{
			0xD9, 0xAA, 0x55, 0xEF, 0x52, 0xC2, 0xA2, 0xB4,
			0xAF, 0x23, 0x14, 0xF3, 0xDB, 0xBB, 0x54, 0x37,
			0x02, 0x85, 0xE5, 0x02, 0x99, 0x99, 0xFD, 0x8F,
			0x2A, 0x7E, 0xCC, 0x31, 0x15, 0x2C, 0xB1, 0x96,
			0x51, 0x32, 0x44, 0x20, 0xBA, 0x50, 0xBB, 0x9C,
			0x93, 0x7E, 0x31, 0x06, 0x01, 0x07, 0xB2, 0x63,
		},
		length: 32,
		final: []byte{
			0xAD, 0x67, 0x38, 0x44, 0x87, 0xBF, 0x0F, 0xFF,
			0x46, 0x25, 0x2C, 0x44, 0xBA, 0xA3, 0xA4, 0x89,
			0xC2, 0x0D, 0x8A, 0xC4, 0x45, 0xBA, 0x06, 0x65,
			0x32, 0x02, 0x55, 0x2E, 0x4E, 0xF1, 0x4C, 0xEF,
		},
	},

	{
		initial: [48]byte{
			0xE6, 0x11, 0xD6, 0x6D, 0xE0, 0x4F, 0x8F, 0xB0,
			0xC7, 0x28, 0xFF, 0x58, 0xE5, 0x26, 0xB3, 0x3B,
			0xD5, 0x87, 0x5D, 0xE2, 0x13, 0xAE, 0x1D, 0xAC,
			0xE6, 0x12, 0x28, 0xA2, 0xFD, 0x3A, 0x7E, 0x25,
			0x75, 0x6E, 0xB9, 0x7B, 0x32, 0x86, 0x6E, 0x19,
			0x58, 0x91, 0xC1, 0xF3, 0xEB, 0x65, 0x3B, 0x83},
		length: 16,
		final: []byte{
			0xA6, 0xE8, 0x94, 0x5D, 0x94, 0xF6, 0x68, 0xD2,
			0x83, 0xCD, 0xFC, 0x23, 0xCD, 0x14, 0xC0, 0x05,
		},
	},

	{
		initial: [48]byte{
			0xA6, 0xE8, 0x94, 0x5D, 0x94, 0xF6, 0x68, 0xD2,
			0x83, 0xCD, 0xFC, 0x23, 0xCD, 0x14, 0xC0, 0x05,
			0x5F, 0x22, 0xAC, 0x42, 0x5F, 0x0C, 0xF7, 0xA4,
			0xDE, 0x7C, 0x17, 0x51, 0xE7, 0xD0, 0x9F, 0x60,
			0x8C, 0x06, 0xF1, 0x73, 0xE8, 0x3B, 0xC2, 0x0A,
			0x26, 0xD4, 0xFF, 0x4B, 0xF6, 0x52, 0x58, 0x8A,
		},
		length: 16,
		final: []byte{
			0x71, 0x65, 0x79, 0x6F, 0xF3, 0xE1, 0x20, 0xDF,
			0x13, 0xAB, 0xFB, 0xCA, 0xE7, 0x00, 0x92, 0xF3,
		},
	},
	{
		initial: [48]byte{
			0x71, 0x65, 0x79, 0x6F, 0xF3, 0xE1, 0x20, 0xDF,
			0x13, 0xAB, 0xFB, 0xCA, 0xE7, 0x00, 0x92, 0xF3,
			0x44, 0x38, 0x66, 0xD8, 0x6D, 0x6E, 0xE6, 0x55,
			0xB3, 0x91, 0x6B, 0xF0, 0xB5, 0x98, 0x6D, 0x2B,
			0xF4, 0x29, 0x66, 0xD4, 0x54, 0xE0, 0x21, 0xB5,
			0xFA, 0xD7, 0xB2, 0xE9, 0x56, 0x8D, 0xA1, 0x4D,
		},
		length: 32,
		final: []byte{
			0xE2, 0xD5, 0xB0, 0x90, 0x8C, 0x77, 0xAA, 0x2A,
			0x7E, 0x37, 0xDF, 0x87, 0xEE, 0xB2, 0xDA, 0x0B,
			0x7E, 0xE3, 0xA0, 0x37, 0x69, 0x19, 0x7C, 0x85,
			0x2C, 0x13, 0x33, 0x1A, 0xBD, 0xE3, 0xC5, 0x0E},
	},

	{
		initial: [48]byte{
			0x7C, 0x45, 0x81, 0x6B, 0x94, 0x69, 0xAF, 0xC3,
			0x35, 0x81, 0xBF, 0x2B, 0xCA, 0xE0, 0x17, 0x57,
			0xE8, 0xB2, 0x4A, 0x18, 0x56, 0x6C, 0xBD, 0x42,
			0xDA, 0xAB, 0x56, 0x2D, 0xD7, 0x44, 0x60, 0xC7,
			0xE6, 0x78, 0x31, 0x70, 0x76, 0xE2, 0x83, 0xDF,
			0xB1, 0xBE, 0xEE, 0xA2, 0x3C, 0x00, 0x84, 0xB9,
		},
		length: 16,
		final: []byte{
			0x53, 0xA5, 0xD0, 0x6E, 0xF9, 0x26, 0x3F, 0xCB,
			0x15, 0x97, 0x33, 0x77, 0x5B, 0x4D, 0x0D, 0x11,
		},
	},

	{
		initial: [48]byte{
			0x53, 0xA5, 0xD0, 0x6E, 0xF9, 0x26, 0x3F, 0xCB,
			0x15, 0x97, 0x33, 0x77, 0x5B, 0x4D, 0x0D, 0x11,
			0x2D, 0x62, 0xE1, 0xB0, 0x74, 0x09, 0xF3, 0x4D,
			0x9D, 0xDE, 0x71, 0x58, 0x51, 0x13, 0x5E, 0x9A,
			0x88, 0x17, 0xD0, 0xB6, 0x4E, 0xAF, 0x3F, 0x08,
			0x1D, 0x7A, 0xF9, 0xC4, 0x63, 0x0F, 0x90, 0xD7,
		},
		length: 16,
		final: []byte{
			0x49, 0xA6, 0x98, 0x68, 0xBF, 0x59, 0x68, 0x39,
			0x02, 0xE2, 0x27, 0x22, 0xEF, 0xFA, 0xDC, 0x2F,
		},
	},

	{
		initial: [48]byte{
			0x49, 0xA6, 0x98, 0x68, 0xBF, 0x59, 0x68, 0x39,
			0x02, 0xE2, 0x27, 0x22, 0xEF, 0xFA, 0xDC, 0x2F,
			0xF1, 0x2A, 0x47, 0x00, 0xBB, 0xC6, 0x0B, 0xBA,
			0x7C, 0x86, 0x90, 0x31, 0x8C, 0x37, 0xB8, 0xFE,
			0x76, 0x75, 0x55, 0xA0, 0xA3, 0xB9, 0x40, 0x0A,
			0xC1, 0xB1, 0x1C, 0x2A, 0xF8, 0xE9, 0xD3, 0xBD,
		},
		length: 32,
		final: []byte{
			0x1E, 0x47, 0xEE, 0x12, 0xC8, 0x25, 0xA1, 0xA3,
			0xB1, 0x49, 0x24, 0xC6, 0xCC, 0xB9, 0xF1, 0x11,
			0xAD, 0xF8, 0x62, 0x74, 0x33, 0xB5, 0xF5, 0xED,
			0x0C, 0x90, 0x7F, 0x27, 0xE8, 0x0A, 0xD6, 0x31,
		},
	},
}

func TestXoodyakSqueezeKey(t *testing.T) {
	for _, tt := range xoodyakSqueezeKeyTestTable {
		newXK := Xoodyak{}
		newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, tt.initial)
		newXK.Phase = Up
		newXK.Mode = Keyed
		newXK.AbsorbSize = xoodyakRkIn
		newXK.SqueezeSize = xoodyakRkOut
		gotKey := newXK.SqueezeKey(tt.length)
		assert.Equal(t, tt.final, gotKey)
	}
}

func TestXoodyakSqueezeKeyWrongMode(t *testing.T) {
	newXK := Xoodyak{}
	newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, [48]byte{})
	newXK.Phase = Up
	newXK.Mode = Hash
	newXK.AbsorbSize = xoodyakRkIn
	newXK.SqueezeSize = xoodyakRkOut
	panicSqueezeKey := func() {
		newXK.SqueezeKey(10)
	}
	assert.PanicsWithError(t, "squeeze key only available in keyed mode", panicSqueezeKey)
}

var absorbKeyPanicTestTable = []struct {
	keySize   int
	nonceSize int
	panicErr  string
}{
	{
		keySize:   32,
		nonceSize: 32,
		panicErr:  "key and nonce lengths too large - key:32 nonce:32 combined:64 max:43",
	},
	{
		keySize:   23,
		nonceSize: 20,
		panicErr:  "",
	},
	{
		keySize:   16,
		nonceSize: 16,
		panicErr:  "",
	},
	{
		keySize:   24,
		nonceSize: 20,
		panicErr:  "key and nonce lengths too large - key:24 nonce:20 combined:44 max:43",
	},
}

func TestAbsorbKeyFailure(t *testing.T) {
	for _, tt := range absorbKeyPanicTestTable {
		newXK := Xoodyak{}
		newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, [48]byte{})
		newXK.Mode = Hash
		newXK.Phase = Up
		newXK.AbsorbSize = xoodyakHashIn
		newXK.SqueezeSize = xoodyakHashIn
		key := make([]byte, tt.keySize)
		nonce := make([]byte, tt.nonceSize)
		panicAbsorbKey := func() {
			newXK.AbsorbKey(key, nonce, nil)
		}
		if tt.panicErr != "" {
			assert.PanicsWithError(t, tt.panicErr, panicAbsorbKey)
		} else {
			assert.NotPanics(t, panicAbsorbKey)
		}
	}
}

func TestXoodyakEncryptDecryptWrongModes(t *testing.T) {
	newXK := Xoodyak{}
	newXK.Instance, _ = xoodoo.NewXoodoo(xoodoo.MaxRounds, [48]byte{})
	newXK.Phase = Up
	newXK.Mode = Hash
	newXK.AbsorbSize = xoodyakRkIn
	newXK.SqueezeSize = xoodyakRkOut
	msg := make([]byte, 64)
	panicEncrypt := func() {
		newXK.Encrypt(msg)
	}
	assert.PanicsWithError(t, "encrypt only available in keyed mode", panicEncrypt)

	panicDecrypt := func() {
		newXK.Decrypt(msg)
	}
	assert.PanicsWithError(t, "decrypt only available in keyed mode", panicDecrypt)
}

var cryptTestTable = []struct {
	key     []byte
	nonce   []byte
	counter []byte
	ad      []byte
	msg     []byte
	ct      []byte
}{
	{
		key:     []byte{0x55, 0x66, 0x77, 0x88, 0x99, 0x00, 0x11, 0x22, 0x33, 0x44, 0xCC, 0xDD, 0xEE, 0xAA, 0xBB, 0xFF},
		nonce:   []byte{0x81, 0x53, 0x39, 0xAC, 0x45, 0x0D, 0x62, 0x1F, 0xC7, 0x4B, 0xF3, 0x8E, 0x02, 0x61, 0xBA, 0x79},
		counter: nil,
		ad:      []byte{0x76, 0x3f, 0x09, 0xb5, 0x01, 0xe3, 0x6a, 0x4c, 0x76, 0x3f, 0xdb, 0x13, 0xba, 0x57, 0xdc, 0xc6},
		msg:     []byte{0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e},
		ct:      []byte{0x96, 0xa7, 0xcf, 0x76, 0xd5, 0xe8, 0x4c},
	},
	{
		key:     []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		nonce:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		counter: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ad:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg:     []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ct:      []byte{0x95, 0xa8, 0x0f, 0x00, 0xee, 0xc2, 0x9d, 0xbc, 0xc3, 0xd5, 0x90, 0x16, 0x32, 0x02, 0x02, 0xda},
	},
	{
		key:     []byte{0x7b, 0xc3, 0xf7, 0xd9, 0x57, 0x07, 0x50, 0xda, 0x6c, 0x74, 0xa8, 0x9d, 0x90, 0xbf, 0xb5, 0xff},
		nonce:   []byte{0x83, 0x7c, 0x82, 0x12, 0x16, 0xbc, 0xd2, 0x3a, 0xfe, 0xcb, 0xe1, 0x35, 0x1a, 0x16, 0x5e, 0x99},
		counter: nil,
		ad:      []byte{0x53, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x20, 0x35, 0x20, 0x31, 0x38, 0x3a, 0x31, 0x32, 0x3a, 0x34, 0x38, 0x20, 0x50, 0x53, 0x54, 0x20, 0x32, 0x30, 0x32, 0x32, 0x0a},
		msg:     []byte("\xef\xbb\xbfThe Project Gutenberg EBook of Candide, by Voltaire"),
		ct: []byte{
			0xb1, 0x27, 0xa9, 0x57, 0x5d, 0x34, 0xaf, 0x23, 0xcd, 0x81, 0x07, 0x33, 0x61, 0x18, 0x76, 0xc3,
			0xf0, 0x1a, 0x16, 0xc8, 0x35, 0x5b, 0xed, 0xb1, 0x18, 0x0d, 0xc8, 0x21, 0x4f, 0x6b, 0x87, 0xe8,
			0xde, 0x9c, 0x49, 0x91, 0xfa, 0xb5, 0xe5, 0x8f, 0xe4, 0x7b, 0xa6, 0x76, 0xf5, 0xe1, 0x5f, 0x50,
			0xea, 0x2a, 0xe1, 0x0d, 0xe7, 0x1a,
		},
	},
	{
		key:     []byte{0x7b, 0xc3, 0xf7, 0xd9, 0x57, 0x07, 0x50, 0xda, 0x6c, 0x74, 0xa8, 0x9d, 0x90, 0xbf, 0xb5, 0xff},
		nonce:   []byte{0x83, 0x7c, 0x82, 0x12, 0x16, 0xbc, 0xd2, 0x3a, 0xfe, 0xcb, 0xe1, 0x35, 0x1a, 0x16, 0x5e, 0x99},
		counter: nil,
		ad:      []byte{0x53, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x20, 0x35, 0x20, 0x31, 0x38, 0x3a, 0x31, 0x32, 0x3a, 0x34, 0x38, 0x20, 0x50, 0x53, 0x54, 0x20, 0x32, 0x30, 0x32, 0x32, 0x0a},
		msg: []byte(
			`In a castle of Westphalia, belonging to the Baron of
Thunder-ten-Tronckh, lived a youth, whom nature had endowed with the
most gentle manners. His countenance was a true picture of his soul. He
combined a true judgment with simplicity of spirit, which was the
reason, I apprehend, of his being called Candide. The old servants of
the family suspected him to have been the son of the Baron's sister, by
a good, honest gentleman of the neighborhood, whom that young lady would
never marry because he had been able to prove only seventy-one
quarterings, the rest of his genealogical tree having been lost through
the injuries of time.`),
		ct: []byte{
			0x17, 0xf2, 0x36, 0x62, 0x15, 0x32, 0xee, 0x00, 0xcb, 0x82, 0x08, 0x76, 0x6d, 0x0a, 0x76, 0xd3, 0xe0, 0x1d, 0x07, 0xd6, 0x3f, 0x5f, 0xf3, 0xbf,
			0x0a, 0x38, 0x9d, 0xe4, 0xc7, 0x81, 0xc5, 0x98, 0x86, 0x93, 0x83, 0x8e, 0x3a, 0xa2, 0xea, 0x0b, 0x13, 0x65, 0x40, 0x04, 0x2f, 0xd2, 0xd6, 0x12,
			0x34, 0xd8, 0x91, 0x8f, 0xd3, 0xbe, 0xb0, 0x8d, 0xa0, 0xf1, 0xf1, 0xf0, 0x1d, 0xeb, 0x4c, 0xf8, 0xd8, 0x77, 0x6f, 0xdd, 0x36, 0x02, 0xa3, 0x62,
			0xf8, 0x56, 0xa3, 0xd0, 0x30, 0xb2, 0xdc, 0x0e, 0xfb, 0xe8, 0x8a, 0xba, 0xc8, 0x64, 0xa7, 0xa5, 0xa2, 0x79, 0x7a, 0x4d, 0xeb, 0x97, 0x2d, 0x6d,
			0x22, 0x8b, 0xda, 0x72, 0x7c, 0x30, 0x45, 0x52, 0x8d, 0xf6, 0x6b, 0xa8, 0x2e, 0x3d, 0xf1, 0xfb, 0xe0, 0x1d, 0x47, 0x68, 0xf8, 0x0a, 0x46, 0xe2,
			0x64, 0x7c, 0xa1, 0xda, 0x6c, 0x62, 0xfa, 0x06, 0x47, 0x98, 0x9a, 0xb8, 0x5f, 0x55, 0x76, 0x8d, 0xaa, 0x84, 0x31, 0x04, 0x4d, 0x48, 0x78, 0x05,
			0x78, 0xe2, 0xcb, 0xe5, 0x00, 0x42, 0x77, 0x6b, 0x78, 0xba, 0x7d, 0x58, 0x15, 0x1f, 0x39, 0x51, 0x75, 0x58, 0x0a, 0xa4, 0x38, 0xee, 0x75, 0x7b,
			0xcc, 0x9d, 0x75, 0xdf, 0x19, 0x0f, 0x74, 0xd6, 0x38, 0xca, 0x3c, 0x54, 0xcc, 0xc6, 0xd5, 0xc4, 0xb4, 0x53, 0x64, 0x1d, 0x9d, 0x84, 0x72, 0x7e,
			0xd9, 0x41, 0x5e, 0xa4, 0x45, 0x3b, 0xfc, 0xb9, 0x4b, 0xb5, 0x70, 0x2d, 0xb8, 0xb3, 0x62, 0x1c, 0x3a, 0x8c, 0x0a, 0xc4, 0x87, 0x3a, 0xb7, 0x97,
			0xd7, 0xb8, 0x32, 0xa3, 0x9c, 0x7b, 0x93, 0xd2, 0xf1, 0x1f, 0xfe, 0x6a, 0x2d, 0x61, 0xe1, 0xfb, 0x9c, 0x88, 0x44, 0x77, 0x59, 0xac, 0xe3, 0x01,
			0xd5, 0x62, 0x72, 0xbb, 0xaf, 0xae, 0x66, 0xa9, 0xd9, 0x3a, 0xb5, 0x0b, 0x55, 0xa1, 0x16, 0x34, 0xa5, 0xe1, 0x94, 0x2f, 0x00, 0xa5, 0x73, 0xad,
			0x98, 0x22, 0x09, 0x5c, 0x35, 0x30, 0x29, 0x59, 0x95, 0x31, 0x81, 0x70, 0xc9, 0xeb, 0x73, 0xc2, 0xa1, 0x5f, 0x16, 0x17, 0xb4, 0x19, 0x1d, 0x43,
			0x46, 0xa1, 0xee, 0x78, 0x11, 0xf4, 0x0d, 0xd0, 0x90, 0x7c, 0xfa, 0x0a, 0x7c, 0x02, 0x10, 0xc9, 0x58, 0x06, 0xd7, 0x15, 0xfc, 0x84, 0xd5, 0x88,
			0xc6, 0x1b, 0xaa, 0xe6, 0xfb, 0x44, 0xde, 0x8b, 0x53, 0xdc, 0xe8, 0x5b, 0x51, 0xe1, 0x9c, 0xf2, 0x50, 0xb4, 0x4c, 0x15, 0x45, 0x90, 0x19, 0x25,
			0x69, 0x8f, 0x96, 0xba, 0xf2, 0x74, 0xf6, 0x28, 0x04, 0xfc, 0x37, 0xa4, 0xe2, 0x59, 0x09, 0x81, 0x72, 0x86, 0x5c, 0x4a, 0xdb, 0x71, 0x47, 0x90,
			0xfe, 0x2a, 0xd6, 0x7b, 0x49, 0x61, 0xbe, 0xa3, 0x43, 0x50, 0xf0, 0x2a, 0x1f, 0x72, 0xc2, 0x1a, 0x04, 0xc1, 0x19, 0x0a, 0x58, 0x34, 0xa2, 0x1b,
			0xce, 0x50, 0xe3, 0xd6, 0xab, 0x36, 0xd9, 0xbc, 0xe8, 0xb7, 0xce, 0xa4, 0x7e, 0x90, 0x81, 0x49, 0x63, 0xc8, 0x35, 0x25, 0x3d, 0xe9, 0x66, 0x4f,
			0x70, 0x23, 0xb4, 0xa5, 0x1d, 0xe1, 0xf2, 0x3e, 0x5b, 0x0a, 0x9e, 0x07, 0xaa, 0x8b, 0x99, 0x11, 0x26, 0x81, 0xa9, 0x64, 0x0c, 0xe7, 0x41, 0xab,
			0xf2, 0x32, 0x76, 0x71, 0x5d, 0x45, 0xd1, 0x86, 0x90, 0x1a, 0xdd, 0xc1, 0x69, 0x75, 0x59, 0x8d, 0xc0, 0x99, 0x90, 0x9d, 0x2e, 0xdc, 0xba, 0x6b,
			0xaa, 0x08, 0x98, 0x23, 0x50, 0x36, 0x46, 0x4d, 0xa0, 0xcd, 0xf8, 0x81, 0xdb, 0xdb, 0xd1, 0x87, 0x9d, 0x7e, 0xeb, 0x20, 0x5c, 0x36, 0x69, 0x12,
			0x85, 0x82, 0x61, 0xbf, 0xf3, 0x63, 0xf1, 0xa8, 0x30, 0x7b, 0x42, 0xf3, 0x07, 0x91, 0x72, 0x4d, 0x98, 0x7a, 0x56, 0x36, 0x2b, 0x5f, 0x11, 0xed,
			0x85, 0x8b, 0xe1, 0x81, 0x33, 0x73, 0x8e, 0xdf, 0x0d, 0xfa, 0xd3, 0xaf, 0x78, 0xc4, 0xe7, 0xad, 0xa4, 0xa1, 0x5d, 0xa0, 0x37, 0x89, 0x2b, 0xfa,
			0x43, 0x47, 0x4e, 0xd4, 0xe9, 0x47, 0x9f, 0x6d, 0x94, 0x1f, 0x43, 0x6e, 0x05, 0x17, 0x2c, 0x10, 0x68, 0xc8, 0xbc, 0x36, 0xa6, 0xe3, 0x47, 0xf2,
			0x09, 0x31, 0xb6, 0xac, 0xa5, 0x26, 0xe3, 0x79, 0x28, 0x0c, 0xdf, 0x31, 0x1a, 0x06, 0x7c, 0x7f, 0x69, 0x19, 0x2f, 0x04, 0x62, 0x65, 0xae, 0x52,
			0x76, 0x2b, 0xb5, 0xfd, 0x1d, 0x8b, 0x12, 0x07, 0x84, 0x25, 0xf3, 0xa8, 0xdc, 0x56, 0xad, 0x72, 0x29, 0xaf, 0x17, 0x7d, 0x91, 0xef, 0x94, 0xf5,
			0x37, 0xc5, 0x51, 0x05, 0x28, 0x21, 0x1b, 0xcd, 0x28, 0x7c, 0x77, 0xe6, 0x0f, 0x21, 0x30, 0x6d, 0xb2, 0x89, 0xad, 0x86, 0x3e, 0x52, 0x5a, 0x2d,
			0xe2, 0x8e, 0xb5, 0x95, 0x14, 0x7b, 0x67},
	},
}

func TestCrypt(t *testing.T) {
	for _, tt := range cryptTestTable {
		newXd := Instantiate(tt.key, tt.nonce, tt.counter)
		newXd.Absorb(tt.ad)
		gotCt := newXd.Encrypt(tt.msg)
		assert.Equal(t, tt.ct, gotCt)
		newXd = Instantiate(tt.key, tt.nonce, tt.counter)
		newXd.Absorb(tt.ad)
		gotPt := newXd.Decrypt(tt.ct)
		assert.Equal(t, gotPt, tt.msg)
	}
}

var cryptBlockTestTable = []struct {
	plaintext  []byte
	ciphertext []byte
}{
	{
		plaintext:  []byte{0x49, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x61, 0x73, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x57, 0x65, 0x73, 0x74, 0x70, 0x68, 0x61, 0x6c, 0x69},
		ciphertext: []byte{0x17, 0xf2, 0x36, 0x62, 0x15, 0x32, 0xee, 0x00, 0xcb, 0x82, 0x08, 0x76, 0x6d, 0x0a, 0x76, 0xd3, 0xe0, 0x1d, 0x07, 0xd6, 0x3f, 0x5f, 0xf3, 0xbf},
	},
	{
		plaintext:  []byte{0x61, 0x2c, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x61, 0x72, 0x6f},
		ciphertext: []byte{0x0a, 0x38, 0x9d, 0xe4, 0xc7, 0x81, 0xc5, 0x98, 0x86, 0x93, 0x83, 0x8e, 0x3a, 0xa2, 0xea, 0x0b, 0x13, 0x65, 0x40, 0x04, 0x2f, 0xd2, 0xd6, 0x12},
	},
	{
		plaintext:  []byte{0x6e, 0x20, 0x6f, 0x66, 0x0a, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x2d, 0x74, 0x65, 0x6e, 0x2d, 0x54, 0x72, 0x6f, 0x6e, 0x63, 0x6b, 0x68},
		ciphertext: []byte{0x34, 0xd8, 0x91, 0x8f, 0xd3, 0xbe, 0xb0, 0x8d, 0xa0, 0xf1, 0xf1, 0xf0, 0x1d, 0xeb, 0x4c, 0xf8, 0xd8, 0x77, 0x6f, 0xdd, 0x36, 0x02, 0xa3, 0x62},
	},
	{
		plaintext:  []byte{0x2c, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x20, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x2c, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x20, 0x6e, 0x61},
		ciphertext: []byte{0xf8, 0x56, 0xa3, 0xd0, 0x30, 0xb2, 0xdc, 0x0e, 0xfb, 0xe8, 0x8a, 0xba, 0xc8, 0x64, 0xa7, 0xa5, 0xa2, 0x79, 0x7a, 0x4d, 0xeb, 0x97, 0x2d, 0x6d},
	},
	{
		plaintext:  []byte{0x74, 0x75, 0x72, 0x65, 0x20, 0x68, 0x61, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68},
		ciphertext: []byte{0x22, 0x8b, 0xda, 0x72, 0x7c, 0x30, 0x45, 0x52, 0x8d, 0xf6, 0x6b, 0xa8, 0x2e, 0x3d, 0xf1, 0xfb, 0xe0, 0x1d, 0x47, 0x68, 0xf8, 0x0a, 0x46, 0xe2},
	},
	{
		plaintext:  []byte{0x65, 0x0a, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x48},
		ciphertext: []byte{0x64, 0x7c, 0xa1, 0xda, 0x6c, 0x62, 0xfa, 0x06, 0x47, 0x98, 0x9a, 0xb8, 0x5f, 0x55, 0x76, 0x8d, 0xaa, 0x84, 0x31, 0x04, 0x4d, 0x48, 0x78, 0x05},
	},
	{
		plaintext:  []byte{0x69, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x20, 0x74, 0x72, 0x75},
		ciphertext: []byte{0x78, 0xe2, 0xcb, 0xe5, 0x00, 0x42, 0x77, 0x6b, 0x78, 0xba, 0x7d, 0x58, 0x15, 0x1f, 0x39, 0x51, 0x75, 0x58, 0x0a, 0xa4, 0x38, 0xee, 0x75, 0x7b},
	},
	{
		plaintext:  []byte{0x65, 0x20, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x75, 0x6c, 0x2e, 0x20, 0x48},
		ciphertext: []byte{0xcc, 0x9d, 0x75, 0xdf, 0x19, 0x0f, 0x74, 0xd6, 0x38, 0xca, 0x3c, 0x54, 0xcc, 0xc6, 0xd5, 0xc4, 0xb4, 0x53, 0x64, 0x1d, 0x9d, 0x84, 0x72, 0x7e},
	},
	{
		plaintext:  []byte{0x65, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65},
		ciphertext: []byte{0xd9, 0x41, 0x5e, 0xa4, 0x45, 0x3b, 0xfc, 0xb9, 0x4b, 0xb5, 0x70, 0x2d, 0xb8, 0xb3, 0x62, 0x1c, 0x3a, 0x8c, 0x0a, 0xc4, 0x87, 0x3a, 0xb7, 0x97},
	},
	{
		plaintext:  []byte{0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x70},
		ciphertext: []byte{0xd7, 0xb8, 0x32, 0xa3, 0x9c, 0x7b, 0x93, 0xd2, 0xf1, 0x1f, 0xfe, 0x6a, 0x2d, 0x61, 0xe1, 0xfb, 0x9c, 0x88, 0x44, 0x77, 0x59, 0xac, 0xe3, 0x01},
	},
	{
		plaintext:  []byte{0x69, 0x72, 0x69, 0x74, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x72, 0x65, 0x61, 0x73},
		ciphertext: []byte{0xd5, 0x62, 0x72, 0xbb, 0xaf, 0xae, 0x66, 0xa9, 0xd9, 0x3a, 0xb5, 0x0b, 0x55, 0xa1, 0x16, 0x34, 0xa5, 0xe1, 0x94, 0x2f, 0x00, 0xa5, 0x73, 0xad},
	},
	{
		plaintext:  []byte{0x6f, 0x6e, 0x2c, 0x20, 0x49, 0x20, 0x61, 0x70, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20},
		ciphertext: []byte{0x98, 0x22, 0x09, 0x5c, 0x35, 0x30, 0x29, 0x59, 0x95, 0x31, 0x81, 0x70, 0xc9, 0xeb, 0x73, 0xc2, 0xa1, 0x5f, 0x16, 0x17, 0xb4, 0x19, 0x1d, 0x43},
	},
	{
		plaintext:  []byte{0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x65, 0x2e, 0x20, 0x54, 0x68},
		ciphertext: []byte{0x46, 0xa1, 0xee, 0x78, 0x11, 0xf4, 0x0d, 0xd0, 0x90, 0x7c, 0xfa, 0x0a, 0x7c, 0x02, 0x10, 0xc9, 0x58, 0x06, 0xd7, 0x15, 0xfc, 0x84, 0xd5, 0x88},
	},
	{
		plaintext:  []byte{0x65, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61},
		ciphertext: []byte{0xc6, 0x1b, 0xaa, 0xe6, 0xfb, 0x44, 0xde, 0x8b, 0x53, 0xdc, 0xe8, 0x5b, 0x51, 0xe1, 0x9c, 0xf2, 0x50, 0xb4, 0x4c, 0x15, 0x45, 0x90, 0x19, 0x25},
	},
	{
		plaintext:  []byte{0x6d, 0x69, 0x6c, 0x79, 0x20, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x69, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61},
		ciphertext: []byte{0x69, 0x8f, 0x96, 0xba, 0xf2, 0x74, 0xf6, 0x28, 0x04, 0xfc, 0x37, 0xa4, 0xe2, 0x59, 0x09, 0x81, 0x72, 0x86, 0x5c, 0x4a, 0xdb, 0x71, 0x47, 0x90},
	},
	{
		plaintext:  []byte{0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42},
		ciphertext: []byte{0xfe, 0x2a, 0xd6, 0x7b, 0x49, 0x61, 0xbe, 0xa3, 0x43, 0x50, 0xf0, 0x2a, 0x1f, 0x72, 0xc2, 0x1a, 0x04, 0xc1, 0x19, 0x0a, 0x58, 0x34, 0xa2, 0x1b},
	},
	{
		plaintext:  []byte{0x61, 0x72, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x62, 0x79, 0x0a, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64},
		ciphertext: []byte{0xce, 0x50, 0xe3, 0xd6, 0xab, 0x36, 0xd9, 0xbc, 0xe8, 0xb7, 0xce, 0xa4, 0x7e, 0x90, 0x81, 0x49, 0x63, 0xc8, 0x35, 0x25, 0x3d, 0xe9, 0x66, 0x4f},
	},
	{
		plaintext:  []byte{0x2c, 0x20, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x20, 0x67, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68},
		ciphertext: []byte{0x70, 0x23, 0xb4, 0xa5, 0x1d, 0xe1, 0xf2, 0x3e, 0x5b, 0x0a, 0x9e, 0x07, 0xaa, 0x8b, 0x99, 0x11, 0x26, 0x81, 0xa9, 0x64, 0x0c, 0xe7, 0x41, 0xab},
	},
	{
		plaintext:  []byte{0x65, 0x20, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x2c, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x61},
		ciphertext: []byte{0xf2, 0x32, 0x76, 0x71, 0x5d, 0x45, 0xd1, 0x86, 0x90, 0x1a, 0xdd, 0xc1, 0x69, 0x75, 0x59, 0x8d, 0xc0, 0x99, 0x90, 0x9d, 0x2e, 0xdc, 0xba, 0x6b},
	},
	{
		plaintext:  []byte{0x74, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x64, 0x79, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x0a, 0x6e, 0x65, 0x76, 0x65, 0x72},
		ciphertext: []byte{0xaa, 0x08, 0x98, 0x23, 0x50, 0x36, 0x46, 0x4d, 0xa0, 0xcd, 0xf8, 0x81, 0xdb, 0xdb, 0xd1, 0x87, 0x9d, 0x7e, 0xeb, 0x20, 0x5c, 0x36, 0x69, 0x12},
	},
	{
		plaintext:  []byte{0x20, 0x6d, 0x61, 0x72, 0x72, 0x79, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x68, 0x65, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65},
		ciphertext: []byte{0x85, 0x82, 0x61, 0xbf, 0xf3, 0x63, 0xf1, 0xa8, 0x30, 0x7b, 0x42, 0xf3, 0x07, 0x91, 0x72, 0x4d, 0x98, 0x7a, 0x56, 0x36, 0x2b, 0x5f, 0x11, 0xed},
	},
	{
		plaintext:  []byte{0x65, 0x6e, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x65},
		ciphertext: []byte{0x85, 0x8b, 0xe1, 0x81, 0x33, 0x73, 0x8e, 0xdf, 0x0d, 0xfa, 0xd3, 0xaf, 0x78, 0xc4, 0xe7, 0xad, 0xa4, 0xa1, 0x5d, 0xa0, 0x37, 0x89, 0x2b, 0xfa},
	},
	{
		plaintext:  []byte{0x76, 0x65, 0x6e, 0x74, 0x79, 0x2d, 0x6f, 0x6e, 0x65, 0x0a, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x2c, 0x20, 0x74},
		ciphertext: []byte{0x43, 0x47, 0x4e, 0xd4, 0xe9, 0x47, 0x9f, 0x6d, 0x94, 0x1f, 0x43, 0x6e, 0x05, 0x17, 0x2c, 0x10, 0x68, 0xc8, 0xbc, 0x36, 0xa6, 0xe3, 0x47, 0xf2},
	},
	{
		plaintext:  []byte{0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x61, 0x6c, 0x6f, 0x67, 0x69},
		ciphertext: []byte{0x09, 0x31, 0xb6, 0xac, 0xa5, 0x26, 0xe3, 0x79, 0x28, 0x0c, 0xdf, 0x31, 0x1a, 0x06, 0x7c, 0x7f, 0x69, 0x19, 0x2f, 0x04, 0x62, 0x65, 0xae, 0x52},
	},
	{
		plaintext:  []byte{0x63, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x65, 0x65, 0x20, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6c, 0x6f, 0x73},
		ciphertext: []byte{0x76, 0x2b, 0xb5, 0xfd, 0x1d, 0x8b, 0x12, 0x07, 0x84, 0x25, 0xf3, 0xa8, 0xdc, 0x56, 0xad, 0x72, 0x29, 0xaf, 0x17, 0x7d, 0x91, 0xef, 0x94, 0xf5},
	},
	{
		plaintext:  []byte{0x74, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f},
		ciphertext: []byte{0x37, 0xc5, 0x51, 0x05, 0x28, 0x21, 0x1b, 0xcd, 0x28, 0x7c, 0x77, 0xe6, 0x0f, 0x21, 0x30, 0x6d, 0xb2, 0x89, 0xad, 0x86, 0x3e, 0x52, 0x5a, 0x2d},
	},
	{
		plaintext:  []byte{0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e},
		ciphertext: []byte{0xe2, 0x8e, 0xb5, 0x95, 0x14, 0x7b, 0x67},
	},
}

func TestCryptBlock(t *testing.T) {
	key := []byte{0x7b, 0xc3, 0xf7, 0xd9, 0x57, 0x07, 0x50, 0xda, 0x6c, 0x74, 0xa8, 0x9d, 0x90, 0xbf, 0xb5, 0xff}
	nonce := []byte{0x83, 0x7c, 0x82, 0x12, 0x16, 0xbc, 0xd2, 0x3a, 0xfe, 0xcb, 0xe1, 0x35, 0x1a, 0x16, 0x5e, 0x99}
	ad := []byte{0x53, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x72, 0x20, 0x20, 0x35, 0x20, 0x31, 0x38, 0x3a, 0x31, 0x32, 0x3a, 0x34, 0x38, 0x20, 0x50, 0x53, 0x54, 0x20, 0x32, 0x30, 0x32, 0x32, 0x0a}
	newXd := Instantiate(key, nonce, nil)
	cu := CryptCuInit
	newXd.Absorb(ad)
	for _, tt := range cryptBlockTestTable {
		gotCt, err := newXd.CryptBlock(tt.plaintext, cu, Encrypting)
		assert.NoError(t, err)
		assert.Equal(t, tt.ciphertext, gotCt)
		cu = CryptCuMain
	}

	newXd = Instantiate(key, nonce, nil)
	cu = CryptCuInit
	newXd.Absorb(ad)
	for _, tt := range cryptBlockTestTable {
		gotPt, err := newXd.CryptBlock(tt.ciphertext, cu, Decrypting)
		assert.NoError(t, err)
		assert.Equal(t, tt.plaintext, gotPt)
		cu = CryptCuMain
	}
}

func TestCryptBlockError(t *testing.T) {
	key := []byte{0x7b, 0xc3, 0xf7, 0xd9, 0x57, 0x07, 0x50, 0xda, 0x6c, 0x74, 0xa8, 0x9d, 0x90, 0xbf, 0xb5, 0xff}
	nonce := []byte{0x83, 0x7c, 0x82, 0x12, 0x16, 0xbc, 0xd2, 0x3a, 0xfe, 0xcb, 0xe1, 0x35, 0x1a, 0x16, 0x5e, 0x99}
	newXd := Instantiate(key, nonce, nil)
	cu := CryptCuInit
	newXd.Absorb(nil)
	tooLargeMsg := make([]byte, 200)
	gotCt, gotErr := newXd.CryptBlock(tooLargeMsg, cu, Encrypting)
	assert.Nil(t, gotCt)
	assert.EqualError(t, gotErr, "input size [200] exceeds Xoodoo max encryption block size [24]")

}

var nonStandardAEADInputsTestTable = []struct {
	key     []byte
	nonce   []byte
	counter []byte
	ad      []byte
	msg     []byte
	ct      []byte
	tag     []byte
}{
	{
		key:     []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		nonce:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		counter: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ad:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg:     []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ct:      []byte{0x95, 0xa8, 0x0f, 0x00, 0xee, 0xc2, 0x9d, 0xbc, 0xc3, 0xd5, 0x90, 0x16, 0x32, 0x02, 0x02, 0xda},
		tag:     []byte{0xd4, 0xf7, 0xf8, 0x2e, 0x43, 0xcf, 0x99, 0xfd, 0x29, 0x17, 0x85, 0x20, 0x23, 0x63, 0xb6, 0xa3},
	},

	{
		key:     []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		nonce:   []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		counter: []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ad:      []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg:     []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		ct:      []byte{0xfa, 0xa1, 0xd2, 0xdf, 0xab, 0xf9, 0x5d, 0x78, 0x73, 0x3d, 0x47, 0xd5, 0xe9, 0xfc, 0x24, 0xb3},
		tag:     []byte{0x8f, 0x81, 0xd8, 0x59, 0x31, 0x5f, 0x26, 0xa1, 0x43, 0x09, 0x8a, 0x22, 0xf9, 0xe6, 0x2a, 0x75},
	},
	{
		key:     []byte{0x32, 0x2b, 0x24, 0x1d, 0x16, 0x0f, 0x08, 0x01, 0xfa, 0xf3, 0xec, 0xe5, 0xde, 0xd7, 0xd0, 0xc9},
		nonce:   []byte{},
		counter: []byte{},
		ad:      []byte{0x41, 0x42, 0x43},
		msg:     []byte{0x44, 0x45, 0x46},
		ct:      []byte{0xfe, 0x17, 0x07},
		tag:     []byte{0xbe, 0x16, 0xe3, 0x85, 0x9e, 0x55, 0x26, 0xa3, 0xeb, 0x23, 0x95, 0x48, 0x0d, 0xbc, 0x78, 0x08},
	},
	{
		key:     []byte{0x48, 0x41, 0x3a, 0x33, 0x2c, 0x25, 0x1e, 0x17, 0x10, 0x09, 0x02, 0xfb, 0xf4, 0xed, 0xe6, 0xdf, 0xd8, 0xd1, 0xca},
		nonce:   []byte{0xc3, 0xbc, 0xb5, 0xae, 0xa7, 0xa0, 0x99, 0x92, 0x8b, 0x84, 0x7d, 0x76, 0x6f, 0x67, 0x60, 0x59},
		counter: []byte{0x88, 0x49, 0x0a, 0xcb, 0x8b, 0x4c, 0x0d, 0xce, 0x8e, 0x4f, 0x10, 0xd1, 0x91, 0x52, 0x13, 0xd4},
		ad:      []byte{0x41, 0x42, 0x43},
		msg:     []byte{0x44, 0x45, 0x46},
		ct:      []byte{0xc2, 0x77, 0x67},
		tag:     []byte{0x3b, 0x3e, 0x6d, 0xbd, 0xfe, 0x19, 0xec, 0xc5, 0x99, 0x10, 0x83, 0x9b, 0xba, 0xc6, 0xdd, 0x73},
	},
	{
		key:     []byte{0x7c, 0x75, 0x6e, 0x67, 0x60, 0x59, 0x52, 0x4b, 0x44, 0x3d, 0x36, 0x2f, 0x28, 0x21, 0x1a, 0x13, 0x0c, 0x05, 0xfe, 0xf7, 0xf0, 0xe9, 0xe2, 0xdb, 0xd4, 0xcd, 0xc6, 0xbf, 0xb8},
		nonce:   []byte{},
		counter: []byte{0x82, 0x43, 0x04, 0xc5, 0x85, 0x46, 0x07, 0xc8, 0x88, 0x49, 0x0a, 0xcb, 0x8b, 0x4c, 0x0d, 0xce},
		ad:      []byte{0x41, 0x42, 0x43},
		msg:     []byte{0x44, 0x45, 0x46},
		ct:      []byte{0x36, 0x8d, 0x6e},
		tag:     []byte{0xa4, 0x05, 0xc9, 0x4a, 0xce, 0xcf, 0x9e, 0x23, 0xf0, 0xe7, 0x73, 0xe2, 0x05, 0xdf, 0xec, 0xb9},
	},
	{
		key:     []byte{0x0e, 0x07, 0x00, 0xf9, 0xf2, 0xeb, 0xe4, 0xdd, 0xd6, 0xcf, 0xc8, 0xc1, 0xba, 0xb3, 0xac, 0xa5, 0x9e, 0x97, 0x90, 0x89},
		nonce:   []byte{0x82, 0x7b, 0x74, 0x6d, 0x66, 0x5f, 0x58, 0x51, 0x4a, 0x43},
		counter: []byte{},
		ad:      []byte{0x41, 0x42, 0x43},
		msg:     []byte{0x44, 0x45, 0x46},
		ct:      []byte{0x8e, 0xa9, 0xf7},
		tag:     []byte{0x73, 0x4c, 0x04, 0x2e, 0xd2, 0x16, 0x4d, 0x82, 0xd0, 0x5b, 0x6d, 0x86, 0x48, 0x45, 0xbf, 0x97},
	},
}

func TestNonStandardXoodyakEncryption(t *testing.T) {
	for _, tt := range nonStandardAEADInputsTestTable {
		newXd := Instantiate(tt.key, tt.nonce, tt.counter)
		newXd.Absorb(tt.ad)
		gotCt := newXd.Encrypt(tt.msg)
		gotTag := newXd.Squeeze(uint(len(tt.tag)))
		assert.Equal(t, tt.ct, gotCt)
		assert.Equal(t, tt.tag, gotTag)

		newXd = Instantiate(tt.key, tt.nonce, tt.counter)
		newXd.Absorb(tt.ad)
		gotPt := newXd.Decrypt(tt.ct)
		gotTag = newXd.Squeeze(uint(len(tt.tag)))
		assert.Equal(t, tt.msg, gotPt)
		assert.Equal(t, tt.tag, gotTag)

	}

}
func BenchmarkEncrypt(b *testing.B) {
	key := make([]byte, 16)
	nonce := make([]byte, 16)
	ad := make([]byte, 16)
	pt := make([]byte, 64)
	newXd := Instantiate(key, nonce, nil)
	newXd.Absorb(ad)
	for n := 0; n < b.N; n++ {
		newXd.Encrypt(pt)
	}
}

func BenchmarkDecrypt(b *testing.B) {
	key := make([]byte, 16)
	nonce := make([]byte, 16)
	ad := make([]byte, 16)
	pt := make([]byte, 64)
	newXd := Instantiate(key, nonce, nil)
	newXd.Absorb(ad)
	for n := 0; n < b.N; n++ {
		newXd.Decrypt(pt)
	}
}
