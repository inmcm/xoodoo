package xoodyak

import (
	"bytes"
	"encoding/binary"
	"errors"
	"testing"

	"github.com/inmcm/xoodoo/xoodoo"

	"github.com/stretchr/testify/assert"
)

var xoodyakInstantiationTestTable = []struct {
	key     []byte
	id      []byte
	counter []byte
	xk      Xoodyak
	err     error
}{
	// Hash mode intialization
	{
		key:     []byte{},
		id:      []byte{},
		counter: []byte{},
		xk: Xoodyak{
			Instance: &xoodoo.XooDoo{
				State: xoodoo.XooDooState{},
			},
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  hashSize,
			SqueezeSize: hashSize,
		},
		err: nil,
	},
}

func TestXoodyakCyclistInstantiate(t *testing.T) {
	for _, tt := range xoodyakInstantiationTestTable {
		gotXk, gotErr := Instantiate(tt.key, tt.id, tt.counter)
		assert.Equal(t, tt.xk.Instance.Bytes(), gotXk.Instance.Bytes())
		assert.Equal(t, tt.xk.Mode, gotXk.Mode)
		assert.Equal(t, tt.xk.Phase, gotXk.Phase)
		assert.Equal(t, tt.xk.AbsorbSize, gotXk.AbsorbSize)
		assert.Equal(t, tt.xk.SqueezeSize, gotXk.SqueezeSize)
		assert.Equal(t, tt.err, gotErr)
	}
}

var xoodyakCyclistDownTestTable = []struct {
	startState [48]byte
	xi         []byte
	cd         byte
	endState   []byte
}{
	{
		startState: [48]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		xi:         []byte{},
		cd:         0x3,
		endState:   []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
	},
	{
		startState: [48]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		xi:         []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
		cd:         0x3,
		endState:   []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
	},
	{
		startState: [48]byte{0x9E, 0xA6, 0x95, 0x34, 0x7C, 0xDD, 0xDF, 0xF9, 0xBC, 0x63, 0xEC, 0xE3, 0x0F, 0xE2, 0x31, 0x44, 0x4C, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		xi:         []byte{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F},
		cd:         0x0,
		endState:   []byte{0x8E, 0xB7, 0x87, 0x27, 0x68, 0xC8, 0xC9, 0xEE, 0xA4, 0x7A, 0xF6, 0xF8, 0x13, 0xFF, 0x2F, 0x5B, 0x4D, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
	},
	{
		startState: [48]byte{0xCE, 0xBE, 0x4A, 0xFF, 0x9E, 0xAC, 0x22, 0x18, 0x01, 0x7D, 0xDA, 0x5F, 0x82, 0x07, 0xBA, 0x83, 0x26, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		xi:         []byte{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F},
		cd:         0x0,
		endState:   []byte{0xEE, 0x9F, 0x68, 0xDC, 0xBA, 0x89, 0x04, 0x3F, 0x29, 0x54, 0xF0, 0x74, 0xAE, 0x2A, 0x94, 0xAC, 0x27, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
	},
	{
		startState: [48]byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		xi:         []byte{},
		cd:         0x0,
		endState:   []byte{0x8B, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
	},

	{
		startState: [48]byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		xi:         []byte{},
		cd:         0x0,
		endState:   []byte{0xEB, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
	},
}

func BenchmarkXoodyakCyclistDown(b *testing.B) {
	var newXd xoodoo.XooDoo
	var newXk Xoodyak
	newXk.Instance = &newXd
	newXk.Mode = Hash
	newXk.Phase = Down
	input := make([]byte, 16)
	for n := 0; n < b.N; n++ {
		newXk.Down(input, 0x03)
	}
}

func TestXoodyakCyclistDown(t *testing.T) {
	for _, tt := range xoodyakCyclistDownTestTable {
		var newXd xoodoo.XooDoo
		var newXk Xoodyak
		newXk.Instance = &newXd
		buf := bytes.NewReader(tt.startState[:])
		binary.Read(buf, binary.LittleEndian, &newXk.Instance.State)
		newXk.Mode = Hash
		newXk.Phase = Down
		newXk.Down(tt.xi, tt.cd)
		gotBytes := newXk.Instance.Bytes()
		assert.Equal(t, tt.endState, gotBytes)
	}
}

var xoodyakCyclistUpTestTable = []struct {
	startState [48]byte
	cu         byte
	yilen      uint
	endState   [48]byte
	yiOut      []byte
}{

	{
		startState: [48]byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		cu:         0x00,
		endState:   [48]byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		yilen:      16,
		yiOut:      []byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B},
	},

	{
		startState: [48]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		cu:         0x00,
		endState:   [48]byte{0x9E, 0xA6, 0x95, 0x34, 0x7C, 0xDD, 0xDF, 0xF9, 0xBC, 0x63, 0xEC, 0xE3, 0x0F, 0xE2, 0x31, 0x44, 0x4C, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		yilen:      0,
		yiOut:      []byte{},
	},
	{
		startState: [48]byte{0x8E, 0xB7, 0x87, 0x27, 0x68, 0xC8, 0xC9, 0xEE, 0xA4, 0x7A, 0xF6, 0xF8, 0x13, 0xFF, 0x2F, 0x5B, 0x4D, 0xA4, 0xB0, 0xA0, 0x07, 0xE7, 0x70, 0xC8, 0x05, 0x9E, 0xB4, 0xBF, 0x2D, 0x35, 0x25, 0xD9, 0x91, 0xB0, 0x86, 0x1E, 0x86, 0x42, 0x32, 0x0C, 0xC6, 0xD3, 0x1A, 0xBB, 0x77, 0x81, 0xCC, 0xFC},
		cu:         0x0,
		endState:   [48]byte{0xCE, 0xBE, 0x4A, 0xFF, 0x9E, 0xAC, 0x22, 0x18, 0x01, 0x7D, 0xDA, 0x5F, 0x82, 0x07, 0xBA, 0x83, 0x26, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		yilen:      0,
		yiOut:      []byte{},
	},
	{
		startState: [48]byte{0xEE, 0x9F, 0x68, 0xDC, 0xBA, 0x89, 0x04, 0x3F, 0x29, 0x54, 0xF0, 0x74, 0xAE, 0x2A, 0x94, 0xAC, 0x27, 0xFD, 0x47, 0x26, 0xD7, 0xB6, 0xAA, 0x46, 0x66, 0xAB, 0x8E, 0x00, 0x77, 0x7A, 0xFB, 0xFA, 0x80, 0x57, 0x8C, 0x79, 0x6C, 0x39, 0x6D, 0x3A, 0xD1, 0x57, 0xFE, 0x96, 0x02, 0x5E, 0xE5, 0x2E},
		cu:         0x0,
		endState:   [48]byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		yilen:      16,
		yiOut:      []byte{0x8A, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95},
	},
	{
		startState: [48]byte{0x8B, 0x77, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		cu:         0x0,
		endState:   [48]byte{0x3F, 0xF2, 0x4E, 0x0E, 0x3E, 0x99, 0x7D, 0xE4, 0x49, 0x33, 0xDE, 0x4A, 0xB8, 0xE5, 0x22, 0x6B, 0x1F, 0x7E, 0xC8, 0x12, 0x50, 0x55, 0x86, 0x8E, 0xEE, 0x09, 0xC1, 0xD0, 0xF6, 0x5B, 0x55, 0xAC, 0x6E, 0xF7, 0x79, 0x5D, 0x5D, 0xA2, 0xBF, 0xFF, 0x21, 0xE6, 0x65, 0xEE, 0xEF, 0xDF, 0x10, 0x35},
		yilen:      16,
		yiOut:      []byte{0x3F, 0xF2, 0x4E, 0x0E, 0x3E, 0x99, 0x7D, 0xE4, 0x49, 0x33, 0xDE, 0x4A, 0xB8, 0xE5, 0x22, 0x6B},
	},

	{
		startState: [48]byte{0xEB, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0x77, 0x02, 0x54, 0x24, 0x11, 0x97, 0xFC, 0x0A, 0x68, 0x66, 0x60, 0xE5, 0xEF, 0xF4, 0x57, 0xC8, 0xCA, 0x56, 0x8F, 0xD9, 0xD5, 0xB9, 0x33, 0x85, 0xC2, 0xEB, 0x9A, 0x0C, 0x4E, 0xD3, 0xB9, 0x9E},
		cu:         0x0,
		endState:   [48]byte{0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1, 0x14, 0x51, 0xD6, 0x8A, 0x68, 0x9A, 0xED, 0x7A, 0x7B, 0x7E, 0x8F, 0x71, 0xDD, 0x0F, 0xAD, 0x14, 0xFB, 0x15, 0xDC, 0x3B, 0x27, 0x45, 0xF9, 0x44, 0x75, 0x3E, 0xA2, 0xC1, 0x80, 0x36, 0xDE, 0x1F},
		yilen:      16,
		yiOut:      []byte{0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1},
	},
}

func BenchmarkXoodyakCyclistUp(b *testing.B) {
	newXd, _ := xoodoo.NewXooDoo(12, [48]byte{})
	var newXk Xoodyak
	newXk.Instance = newXd
	newXk.Mode = Hash
	newXk.Phase = Up
	for n := 0; n < b.N; n++ {
		newXk.Up(0x00, 16)
	}
}

func TestXoodyakCyclistUp(t *testing.T) {
	for _, tt := range xoodyakCyclistUpTestTable {
		newXd, _ := xoodoo.NewXooDoo(12, tt.startState)
		var newXk Xoodyak
		newXk.Instance = newXd
		newXk.Mode = Hash
		newXk.Phase = Up
		gotyi, _ := newXk.Up(tt.cu, tt.yilen)
		assert.Equal(t, tt.yiOut, gotyi)
	}
}

var xoodyakCyclistAbsorbAnyTestTable = []struct {
	x     []byte
	r     uint
	cd    uint8
	xdIn  [48]byte
	xkIn  Xoodyak
	xdOut []byte
	xkOut Xoodyak
	err   error
}{
	{
		x:    []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30},
		r:    hashSize,
		cd:   0x03,
		xdIn: [48]byte{},
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  hashSize,
			SqueezeSize: hashSize,
		},
		xdOut: []byte{0xBA, 0x76, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		xkOut: Xoodyak{
			Mode:  Hash,
			Phase: Down,
		},
		err: nil,
	},
	{
		x:    []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D},
		r:    hashSize,
		cd:   0x03,
		xdIn: [48]byte{},
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  hashSize,
			SqueezeSize: hashSize,
		},
		xdOut: []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		xkOut: Xoodyak{
			Mode:  Hash,
			Phase: Down,
		},
		err: nil,
	},
}

func TestXoodyakCyclistAbsorbAny(t *testing.T) {
	for _, tt := range xoodyakCyclistAbsorbAnyTestTable {
		tt.xkIn.Instance, _ = xoodoo.NewXooDoo(12, tt.xdIn)
		gotErr := tt.xkIn.AbsorbAny(tt.x, tt.r, tt.cd)
		assert.Equal(t, tt.err, gotErr)
		assert.Equal(t, tt.err, gotErr)
		assert.Equal(t, tt.xdOut, tt.xkIn.Instance.Bytes())
		assert.Equal(t, tt.xkOut.Mode, tt.xkIn.Mode)
		assert.Equal(t, tt.xkOut.Phase, tt.xkIn.Phase)
	}
}

var xoodyakCyclistSqueezeAnyTestTable = []struct {
	xdIn   [48]byte
	YLen   uint
	cu     uint8
	xkIn   Xoodyak
	output []byte
	err    error
}{
	{
		xdIn: [48]byte{0xBA, 0x76, 0xED, 0xB5, 0x98, 0x02, 0x4B, 0x88, 0x6C, 0x6D, 0xB0, 0x4E, 0x3C, 0x52, 0x71, 0x95, 0x2D, 0x95, 0xF2, 0x55, 0x0B, 0xA1, 0xCB, 0x84, 0xB4, 0x96, 0x95, 0x3F, 0xA9, 0x89, 0x0A, 0x36, 0x21, 0x25, 0x74, 0x4C, 0x03, 0x64, 0x94, 0x9C, 0xCB, 0xE4, 0x3B, 0x94, 0xDE, 0x07, 0x98, 0x35},
		YLen: 32,
		cu:   SqueezeCuInit,
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  hashSize,
			SqueezeSize: hashSize,
		},
		output: []byte{0xCC, 0xA2, 0x60, 0xC4, 0x94, 0x7D, 0xE5, 0xE6, 0xE1, 0x79, 0x6C, 0xDB, 0xF6, 0xA0, 0xC7, 0xE2, 0xDB, 0xBD, 0x2C, 0xEB, 0x6B, 0x80, 0x06, 0xB7, 0x20, 0xEA, 0x0A, 0x99, 0x61, 0xA3, 0x44, 0x91},
		err:    nil,
	},
	{
		xdIn: [48]byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
		YLen: 32,
		cu:   SqueezeCuInit,
		xkIn: Xoodyak{
			Mode:        Hash,
			Phase:       Up,
			AbsorbSize:  hashSize,
			SqueezeSize: hashSize,
		},
		output: []byte{0x2A, 0x6C, 0x05, 0x77, 0x40, 0xF5, 0xC3, 0xCC, 0xBE, 0x06, 0x34, 0x19, 0x61, 0xAF, 0xFD, 0x0D, 0x88, 0xF5, 0x67, 0xCA, 0x48, 0x22, 0xB9, 0xF2, 0x18, 0x14, 0x20, 0x5D, 0xA7, 0xD3, 0xAA, 0xED},
		err:    nil,
	},
}

func TestXoodyakCyclistSqueezeAny(t *testing.T) {
	for _, tt := range xoodyakCyclistSqueezeAnyTestTable {
		tt.xkIn.Instance, _ = xoodoo.NewXooDoo(12, tt.xdIn)
		gotOutput, gotErr := tt.xkIn.SqueezeAny(tt.YLen, tt.cu)
		assert.Equal(t, tt.output, gotOutput)
		assert.Equal(t, tt.err, gotErr)
	}
}

var xoodyakRatchetTestTable = []struct {
	initial [48]byte
	final   []byte
}{
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA5, 0x4D, 0x15, 0x64, 0x95, 0xDB, 0x31, 0xC1,
			0xC1, 0x04, 0x66, 0xF6, 0x98, 0x86, 0x34, 0x5D,
			0x42, 0x08, 0x98, 0x67, 0x42, 0xCC, 0x7B, 0x5C,
			0x41, 0xA8, 0x41, 0xE3, 0x66, 0x03, 0x0A, 0xE1,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA5, 0x4D, 0x15, 0x64, 0x95, 0xDB, 0x31, 0xC1,
			0xC1, 0x04, 0x66, 0xF6, 0x98, 0x86, 0x34, 0x5D,
			0x42, 0x08, 0x98, 0x67, 0x42, 0xCC, 0x7B, 0x5C,
			0x41, 0xA8, 0x41, 0xE3, 0x66, 0x03, 0x0A, 0xE1,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x93, 0x9F, 0xBC, 0xFC, 0xE3, 0xE8, 0xF2, 0x20,
			0x25, 0x5C, 0xBD, 0x90, 0x02, 0x9D, 0x7D, 0x3B,
			0x74, 0xA9, 0x18, 0x7B, 0x7D, 0xEE, 0xFE, 0x35,
			0x5C, 0x11, 0x61, 0x11, 0xC1, 0xDE, 0x49, 0xE5,
		},
	},
	{
		initial: [48]byte{
			0xBE, 0x6E, 0x37, 0x66, 0x53, 0x34, 0x92, 0xEE,
			0x19, 0x32, 0x73, 0x84, 0xD5, 0xF3, 0x8A, 0x29,
			0xD9, 0x24, 0xFF, 0x14, 0x42, 0x8E, 0x33, 0x4D,
			0x72, 0x49, 0xA8, 0x20, 0xCD, 0x7E, 0xEB, 0xBD,
			0xBF, 0xB1, 0x0D, 0xFA, 0x9F, 0x7D, 0xBC, 0x16,
			0x92, 0x81, 0xD9, 0x37, 0x46, 0x22, 0x5F, 0x52,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x0B, 0x99, 0xEC, 0x1F, 0x09, 0xC7, 0x93,
			0x5C, 0x69, 0x6B, 0x64, 0xA3, 0x89, 0x02, 0x9E,
			0x3D, 0xED, 0xBF, 0x87, 0x89, 0x80, 0x8C, 0x26,
			0xCB, 0xD8, 0x73, 0xCA, 0xFD, 0x53, 0xD6, 0x2D,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x2E, 0x0B, 0x99, 0xEC, 0x1F, 0x09, 0xC7, 0x93,
			0x5C, 0x69, 0x6B, 0x64, 0xA3, 0x89, 0x02, 0x9E,
			0x3D, 0xED, 0xBF, 0x87, 0x89, 0x80, 0x8C, 0x26,
			0xCB, 0xD8, 0x73, 0xCA, 0xFD, 0x53, 0xD6, 0x2D,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xBF, 0xDF, 0xE2, 0x55, 0x83, 0x69, 0x97, 0x39,
			0xC5, 0xF9, 0xA7, 0xF6, 0x99, 0xC0, 0x0E, 0xB2,
			0x0D, 0x88, 0x60, 0x60, 0xF7, 0xB2, 0xEA, 0xDD,
			0x3F, 0xC7, 0x3B, 0x8B, 0x55, 0x7A, 0xC7, 0x3C,
		},
	},

	{
		initial: [48]byte{
			0xE6, 0x11, 0xD6, 0x6D, 0xE0, 0x4F, 0x8F, 0xB0,
			0xC7, 0x28, 0xFF, 0x58, 0xE5, 0x26, 0xB3, 0x3B,
			0xD5, 0x87, 0x5D, 0xE2, 0x13, 0xAE, 0x1D, 0xAC,
			0xE6, 0x12, 0x28, 0xA2, 0xFD, 0x3A, 0x7E, 0x25,
			0x75, 0x6E, 0xB9, 0x7B, 0x32, 0x86, 0x6E, 0x19,
			0x58, 0x91, 0xC1, 0xF3, 0xEB, 0x65, 0x3B, 0x83,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xAD, 0x6F, 0x16, 0xE3, 0x9E, 0x11, 0x89,
			0x9C, 0xF0, 0x76, 0xC4, 0x88, 0x19, 0xED, 0x27,
			0x6E, 0x9C, 0xBB, 0x72, 0x2E, 0x1C, 0x79, 0x79,
			0xA6, 0x87, 0x8D, 0x63, 0x85, 0xCB, 0xA2, 0x14,
		},
	},

	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0xAD, 0x6F, 0x16, 0xE3, 0x9E, 0x11, 0x89,
			0x9C, 0xF0, 0x76, 0xC4, 0x88, 0x19, 0xED, 0x27,
			0x6E, 0x9C, 0xBB, 0x72, 0x2E, 0x1C, 0x79, 0x79,
			0xA6, 0x87, 0x8D, 0x63, 0x85, 0xCB, 0xA2, 0x14,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF8, 0x33, 0xB6, 0x96, 0xF4, 0xFD, 0xAF, 0x51,
			0xF8, 0xC7, 0x5E, 0x0D, 0xEC, 0x7D, 0xCB, 0x99,
			0x06, 0x61, 0xBE, 0x61, 0x14, 0xF4, 0x0C, 0xC6,
			0xC6, 0xF6, 0x60, 0x5B, 0x8C, 0xFE, 0xF9, 0x7D,
		},
	},
	{
		initial: [48]byte{
			0x1C, 0xF1, 0xE2, 0xED, 0x0B, 0x61, 0x56, 0x24,
			0x1A, 0x59, 0xC6, 0x4E, 0xB2, 0xEC, 0x00, 0xE0,
			0xB8, 0x35, 0xD6, 0x5D, 0xB9, 0x31, 0x40, 0xD6,
			0x84, 0x7B, 0xC6, 0xAB, 0x07, 0x92, 0xAA, 0x4E,
			0x9B, 0xBB, 0x42, 0x6A, 0xF5, 0x8C, 0xC1, 0x97,
			0xB0, 0x26, 0x7F, 0xC4, 0x08, 0x58, 0x74, 0x99,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0x3F, 0x2A, 0x6C, 0x3F, 0xE8, 0xBD, 0xA9,
			0x27, 0xC4, 0xA7, 0x9C, 0x18, 0xC5, 0xAE, 0x94,
			0xEF, 0x4B, 0xA4, 0x9B, 0x63, 0x58, 0x28, 0xF4,
			0x0C, 0x01, 0xAE, 0xFF, 0xA6, 0xC4, 0x4E, 0xAD,
		},
	},
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xD4, 0x3F, 0x2A, 0x6C, 0x3F, 0xE8, 0xBD, 0xA9,
			0x27, 0xC4, 0xA7, 0x9C, 0x18, 0xC5, 0xAE, 0x94,
			0xEF, 0x4B, 0xA4, 0x9B, 0x63, 0x58, 0x28, 0xF4,
			0x0C, 0x01, 0xAE, 0xFF, 0xA6, 0xC4, 0x4E, 0xAD,
		},
		final: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE5, 0x77, 0x8C, 0x55, 0x40, 0x01, 0xE3, 0x99,
			0xFF, 0x58, 0xC0, 0x1B, 0x84, 0x3E, 0xDF, 0x46,
			0xEB, 0xD2, 0xCB, 0xDC, 0x69, 0xA9, 0x15, 0x11,
			0x45, 0x58, 0x2B, 0x15, 0x38, 0x11, 0x34, 0x87,
		},
	},
}

func TestXoodyakRatchet(t *testing.T) {
	for _, tt := range xoodyakRatchetTestTable {
		newXK := Xoodyak{}
		newXK.Instance, _ = xoodoo.NewXooDoo(xoodoo.MaxRounds, tt.initial)
		newXK.Phase = Up
		newXK.Mode = Keyed
		newXK.AbsorbSize = XoodyakRkin
		newXK.SqueezeSize = XoodyakRkout
		newXK.Ratchet()
		assert.Equal(t, tt.final, newXK.Instance.Bytes())
	}
}

func TestXoodyakRatchetWrongMode(t *testing.T) {
	newXK := Xoodyak{}
	newXK.Instance, _ = xoodoo.NewXooDoo(xoodoo.MaxRounds, [48]byte{})
	newXK.Phase = Up
	newXK.Mode = Hash
	newXK.AbsorbSize = XoodyakRkin
	newXK.SqueezeSize = XoodyakRkout
	gotErr := newXK.Ratchet()
	assert.Equal(t, errors.New("ratchet only available in keyed mode"), gotErr)
}

var xoodyakSqueezeKeyTestTable = []struct {
	initial [48]byte
	length  uint
	final   []byte
}{
	{
		initial: [48]byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		length: 16,
		final: []byte{
			0xC9, 0xD2, 0x4C, 0x71, 0xFF, 0x46, 0xF1, 0xA6,
			0x4C, 0x5C, 0x31, 0x73, 0xFD, 0x6D, 0x75, 0xD5,
		},
	},
	{
		initial: [48]byte{
			0xBE, 0x6E, 0x37, 0x66, 0x53, 0x34, 0x92, 0xEE,
			0x19, 0x32, 0x73, 0x84, 0xD5, 0xF3, 0x8A, 0x29,
			0xD9, 0x24, 0xFF, 0x14, 0x42, 0x8E, 0x33, 0x4D,
			0x72, 0x49, 0xA8, 0x20, 0xCD, 0x7E, 0xEB, 0xBD,
			0xBF, 0xB1, 0x0D, 0xFA, 0x9F, 0x7D, 0xBC, 0x16,
			0x92, 0x81, 0xD9, 0x37, 0x46, 0x22, 0x5F, 0x52,
		},
		length: 16,
		final: []byte{
			0x2A, 0xA3, 0x85, 0x58, 0x66, 0x54, 0x71, 0x70,
			0xD6, 0x2E, 0x7F, 0xA6, 0xD6, 0xC1, 0x96, 0x04,
		},
	},

	{
		initial: [48]byte{
			0x2A, 0xA3, 0x85, 0x58, 0x66, 0x54, 0x71, 0x70,
			0xD6, 0x2E, 0x7F, 0xA6, 0xD6, 0xC1, 0x96, 0x04,
			0x0E, 0xBA, 0x9F, 0x29, 0x43, 0x19, 0x06, 0x66,
			0xDD, 0xEF, 0x3D, 0x23, 0x92, 0xD8, 0xD8, 0x07,
			0x78, 0x6C, 0xB8, 0x45, 0x82, 0x05, 0x59, 0x6D,
			0xE4, 0x03, 0x20, 0xCF, 0x26, 0xEF, 0x2E, 0xF9},
		length: 16,
		final: []byte{
			0xD9, 0xAA, 0x55, 0xEF, 0x52, 0xC2, 0xA2, 0xB4,
			0xAF, 0x23, 0x14, 0xF3, 0xDB, 0xBB, 0x54, 0x37,
		},
	},
	{
		initial: [48]byte{
			0xD9, 0xAA, 0x55, 0xEF, 0x52, 0xC2, 0xA2, 0xB4,
			0xAF, 0x23, 0x14, 0xF3, 0xDB, 0xBB, 0x54, 0x37,
			0x02, 0x85, 0xE5, 0x02, 0x99, 0x99, 0xFD, 0x8F,
			0x2A, 0x7E, 0xCC, 0x31, 0x15, 0x2C, 0xB1, 0x96,
			0x51, 0x32, 0x44, 0x20, 0xBA, 0x50, 0xBB, 0x9C,
			0x93, 0x7E, 0x31, 0x06, 0x01, 0x07, 0xB2, 0x63,
		},
		length: 32,
		final: []byte{
			0xAD, 0x67, 0x38, 0x44, 0x87, 0xBF, 0x0F, 0xFF,
			0x46, 0x25, 0x2C, 0x44, 0xBA, 0xA3, 0xA4, 0x89,
			0xC2, 0x0D, 0x8A, 0xC4, 0x45, 0xBA, 0x06, 0x65,
			0x32, 0x02, 0x55, 0x2E, 0x4E, 0xF1, 0x4C, 0xEF,
		},
	},

	{
		initial: [48]byte{
			0xE6, 0x11, 0xD6, 0x6D, 0xE0, 0x4F, 0x8F, 0xB0,
			0xC7, 0x28, 0xFF, 0x58, 0xE5, 0x26, 0xB3, 0x3B,
			0xD5, 0x87, 0x5D, 0xE2, 0x13, 0xAE, 0x1D, 0xAC,
			0xE6, 0x12, 0x28, 0xA2, 0xFD, 0x3A, 0x7E, 0x25,
			0x75, 0x6E, 0xB9, 0x7B, 0x32, 0x86, 0x6E, 0x19,
			0x58, 0x91, 0xC1, 0xF3, 0xEB, 0x65, 0x3B, 0x83},
		length: 16,
		final: []byte{
			0xA6, 0xE8, 0x94, 0x5D, 0x94, 0xF6, 0x68, 0xD2,
			0x83, 0xCD, 0xFC, 0x23, 0xCD, 0x14, 0xC0, 0x05,
		},
	},

	{
		initial: [48]byte{
			0xA6, 0xE8, 0x94, 0x5D, 0x94, 0xF6, 0x68, 0xD2,
			0x83, 0xCD, 0xFC, 0x23, 0xCD, 0x14, 0xC0, 0x05,
			0x5F, 0x22, 0xAC, 0x42, 0x5F, 0x0C, 0xF7, 0xA4,
			0xDE, 0x7C, 0x17, 0x51, 0xE7, 0xD0, 0x9F, 0x60,
			0x8C, 0x06, 0xF1, 0x73, 0xE8, 0x3B, 0xC2, 0x0A,
			0x26, 0xD4, 0xFF, 0x4B, 0xF6, 0x52, 0x58, 0x8A,
		},
		length: 16,
		final: []byte{
			0x71, 0x65, 0x79, 0x6F, 0xF3, 0xE1, 0x20, 0xDF,
			0x13, 0xAB, 0xFB, 0xCA, 0xE7, 0x00, 0x92, 0xF3,
		},
	},
	{
		initial: [48]byte{
			0x71, 0x65, 0x79, 0x6F, 0xF3, 0xE1, 0x20, 0xDF,
			0x13, 0xAB, 0xFB, 0xCA, 0xE7, 0x00, 0x92, 0xF3,
			0x44, 0x38, 0x66, 0xD8, 0x6D, 0x6E, 0xE6, 0x55,
			0xB3, 0x91, 0x6B, 0xF0, 0xB5, 0x98, 0x6D, 0x2B,
			0xF4, 0x29, 0x66, 0xD4, 0x54, 0xE0, 0x21, 0xB5,
			0xFA, 0xD7, 0xB2, 0xE9, 0x56, 0x8D, 0xA1, 0x4D,
		},
		length: 32,
		final: []byte{
			0xE2, 0xD5, 0xB0, 0x90, 0x8C, 0x77, 0xAA, 0x2A,
			0x7E, 0x37, 0xDF, 0x87, 0xEE, 0xB2, 0xDA, 0x0B,
			0x7E, 0xE3, 0xA0, 0x37, 0x69, 0x19, 0x7C, 0x85,
			0x2C, 0x13, 0x33, 0x1A, 0xBD, 0xE3, 0xC5, 0x0E},
	},

	{
		initial: [48]byte{
			0x7C, 0x45, 0x81, 0x6B, 0x94, 0x69, 0xAF, 0xC3,
			0x35, 0x81, 0xBF, 0x2B, 0xCA, 0xE0, 0x17, 0x57,
			0xE8, 0xB2, 0x4A, 0x18, 0x56, 0x6C, 0xBD, 0x42,
			0xDA, 0xAB, 0x56, 0x2D, 0xD7, 0x44, 0x60, 0xC7,
			0xE6, 0x78, 0x31, 0x70, 0x76, 0xE2, 0x83, 0xDF,
			0xB1, 0xBE, 0xEE, 0xA2, 0x3C, 0x00, 0x84, 0xB9,
		},
		length: 16,
		final: []byte{
			0x53, 0xA5, 0xD0, 0x6E, 0xF9, 0x26, 0x3F, 0xCB,
			0x15, 0x97, 0x33, 0x77, 0x5B, 0x4D, 0x0D, 0x11,
		},
	},

	{
		initial: [48]byte{
			0x53, 0xA5, 0xD0, 0x6E, 0xF9, 0x26, 0x3F, 0xCB,
			0x15, 0x97, 0x33, 0x77, 0x5B, 0x4D, 0x0D, 0x11,
			0x2D, 0x62, 0xE1, 0xB0, 0x74, 0x09, 0xF3, 0x4D,
			0x9D, 0xDE, 0x71, 0x58, 0x51, 0x13, 0x5E, 0x9A,
			0x88, 0x17, 0xD0, 0xB6, 0x4E, 0xAF, 0x3F, 0x08,
			0x1D, 0x7A, 0xF9, 0xC4, 0x63, 0x0F, 0x90, 0xD7,
		},
		length: 16,
		final: []byte{
			0x49, 0xA6, 0x98, 0x68, 0xBF, 0x59, 0x68, 0x39,
			0x02, 0xE2, 0x27, 0x22, 0xEF, 0xFA, 0xDC, 0x2F,
		},
	},

	{
		initial: [48]byte{
			0x49, 0xA6, 0x98, 0x68, 0xBF, 0x59, 0x68, 0x39,
			0x02, 0xE2, 0x27, 0x22, 0xEF, 0xFA, 0xDC, 0x2F,
			0xF1, 0x2A, 0x47, 0x00, 0xBB, 0xC6, 0x0B, 0xBA,
			0x7C, 0x86, 0x90, 0x31, 0x8C, 0x37, 0xB8, 0xFE,
			0x76, 0x75, 0x55, 0xA0, 0xA3, 0xB9, 0x40, 0x0A,
			0xC1, 0xB1, 0x1C, 0x2A, 0xF8, 0xE9, 0xD3, 0xBD,
		},
		length: 32,
		final: []byte{
			0x1E, 0x47, 0xEE, 0x12, 0xC8, 0x25, 0xA1, 0xA3,
			0xB1, 0x49, 0x24, 0xC6, 0xCC, 0xB9, 0xF1, 0x11,
			0xAD, 0xF8, 0x62, 0x74, 0x33, 0xB5, 0xF5, 0xED,
			0x0C, 0x90, 0x7F, 0x27, 0xE8, 0x0A, 0xD6, 0x31,
		},
	},
}

func TestXoodyakSqueezeKey(t *testing.T) {
	for _, tt := range xoodyakSqueezeKeyTestTable {
		newXK := Xoodyak{}
		newXK.Instance, _ = xoodoo.NewXooDoo(xoodoo.MaxRounds, tt.initial)
		newXK.Phase = Up
		newXK.Mode = Keyed
		newXK.AbsorbSize = XoodyakRkin
		newXK.SqueezeSize = XoodyakRkout
		gotKey, _ := newXK.SqueezeKey(tt.length)
		assert.Equal(t, tt.final, gotKey)
	}
}

func TestXoodyakSqueezeKeyWrongMode(t *testing.T) {
	newXK := Xoodyak{}
	newXK.Instance, _ = xoodoo.NewXooDoo(xoodoo.MaxRounds, [48]byte{})
	newXK.Phase = Up
	newXK.Mode = Hash
	newXK.AbsorbSize = XoodyakRkin
	newXK.SqueezeSize = XoodyakRkout
	gotKey, gotErr := newXK.SqueezeKey(16)
	assert.Equal(t, errors.New("squeeze key only available in keyed mode"), gotErr)
	assert.Equal(t, []byte{}, gotKey)
}
