package xoodyak

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var xoodyakMACTestTable = []struct {
	key []byte
	msg []byte
	mac []byte
}{
	{
		key: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		mac: []byte{0x3D, 0xA0, 0x6B, 0xFD, 0x00, 0xC8, 0x9C, 0x80, 0x01, 0x02, 0x86, 0xE4, 0x56, 0x8F, 0x63, 0x2E, 0x81, 0x14, 0xAA, 0xCF, 0xED, 0x3A, 0x46, 0x93, 0xB9, 0x75, 0x32, 0xC9, 0xCA, 0x6D, 0xC2, 0x91},
	},
	{
		key: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		mac: []byte{0x09, 0xFA, 0x4F, 0xDA, 0xD3, 0xB8, 0xF9, 0x9A, 0x81, 0x37, 0xE4, 0xAB, 0x71, 0xBD, 0x57, 0x1B, 0xDB, 0xCA, 0x8F, 0x5C, 0x3E, 0x2A, 0xD5, 0xA3, 0x46, 0x4B, 0x44, 0x63, 0x47, 0xE4, 0xB0, 0x7C},
	},
	{
		key: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		msg: []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		mac: []byte{0xD8, 0xD2, 0xCA, 0x8D, 0x0A, 0x2F, 0x59, 0x21, 0x25, 0x94, 0xEB, 0x59, 0x3D, 0xD2, 0xF2, 0xD0, 0x3A, 0x0D, 0x59, 0x74, 0xB9, 0xAB, 0x3B, 0xA3, 0x0E, 0xFE, 0x1B, 0x4D, 0x40, 0xBE, 0xA3, 0x34},
	},
	{
		key: []byte{0x30, 0x50, 0x5E, 0x22, 0xE6, 0x08, 0x67, 0x51, 0x9F, 0x6A, 0x1D, 0xAA, 0xCF, 0xD0, 0x49, 0xD5, 0xBA, 0xFB},
		msg: []byte{0x2B, 0xBA, 0x42, 0xD0, 0x78, 0x05, 0x29, 0x25, 0x2F, 0x33, 0x53, 0x4A, 0x08, 0x78, 0x98, 0x6F, 0x24, 0xB3, 0x3B, 0xB0, 0xC1, 0x83, 0xE1, 0xAE, 0x72, 0xB8, 0xCD, 0x64, 0x9D, 0xF5, 0x76, 0x1C, 0x72, 0x73, 0xCB, 0x0F, 0xDD, 0x35, 0x51, 0x09, 0x0A, 0x76, 0xF7, 0xDE, 0xE0, 0x12},
		mac: []byte{0xBF, 0xE6, 0x80, 0xFE, 0x6A, 0x79, 0xA4, 0x4D, 0xA9, 0x28, 0x54, 0x93, 0xB7, 0x7E, 0x4D, 0xD6, 0x0D, 0x6E, 0x3A, 0xC9, 0x68, 0x5D, 0xC5, 0xAC, 0x1E, 0x8C, 0x34, 0x20, 0x20, 0xC0, 0x28, 0x88},
	},
	{
		key: []byte{0x36, 0xB1, 0x54, 0x2D, 0xD1, 0x7B, 0x0B, 0x7E, 0xA0, 0x96, 0xDE, 0x90, 0x2E, 0xAE, 0x32, 0x0A, 0x82, 0xE2, 0x09, 0x69},
		msg: []byte{0xA5, 0xEA, 0x98, 0xC0, 0xB6},
		mac: []byte{0xD3, 0xA1, 0x16, 0xD3, 0xE9, 0x61, 0xF0, 0xAE, 0x6E, 0xAA, 0xEE, 0x27, 0x40, 0x82, 0x58, 0x15, 0x55, 0xB1, 0x44, 0x5D, 0x94, 0x24, 0x0A, 0xDB, 0xF1, 0x2D, 0xE2, 0x8A, 0xDA, 0x8C, 0xA5, 0x3C},
	},
	{
		key: []byte{0x02, 0xE8, 0x9E, 0x35, 0xB6, 0xAE, 0xEB},
		msg: []byte{0xAA, 0xC9, 0x7D, 0xA5, 0xDF, 0x30, 0xA0, 0xBA, 0x0C, 0x22, 0x12, 0xCC, 0x3E, 0xCE, 0x65, 0xC9, 0xAB, 0xF3, 0xAF, 0x8A, 0xA3, 0x98, 0x34, 0xF3, 0xF2, 0x00, 0xF2, 0xD7, 0xD8, 0x93, 0x47, 0x52, 0xF6, 0xB9, 0xD2, 0x25, 0x2D, 0x0D, 0x47, 0xFC, 0xAB, 0xC8, 0x14, 0xC6, 0xDC, 0xDE, 0x4E, 0xA6},
		mac: []byte{0x92, 0xEF, 0xF8, 0x6D, 0x61, 0xD8, 0x46, 0x91, 0xC4, 0xF6, 0x11, 0xF1, 0x42, 0x1C, 0xCC, 0xDB, 0xB4, 0xFE, 0x85, 0xF7, 0x34, 0x5A, 0x28, 0xBE, 0xCA, 0xF8, 0xC2, 0x99, 0xDE, 0x72, 0x15, 0xA8},
	},
	{
		key: []byte{0x2F, 0xE6, 0x1E, 0x68, 0x8C, 0xCA, 0x96, 0xDC, 0x8B, 0x06, 0x8D, 0xEC, 0x8C, 0x75, 0x2B, 0x75},
		msg: []byte{0x33, 0xC8, 0xC3, 0x45, 0xE7, 0x30, 0x79, 0xCF, 0xF9, 0x10, 0x2D, 0xBA, 0x1E, 0x37, 0xF0, 0x82, 0x10, 0x9F, 0xDD, 0x52, 0x0C, 0x7B, 0x2E, 0x1A, 0x6E, 0x81, 0x5F, 0x59, 0x88, 0x8F, 0xB1, 0x8F, 0x39, 0x0F, 0x50, 0x72, 0x53, 0x91, 0x03, 0xB0, 0xCC, 0xB0, 0xEB, 0x25, 0x25, 0x2F, 0xEC, 0xD9, 0x4D, 0x10, 0x59, 0x46, 0xDF, 0x6C, 0xE9, 0x53, 0x9D, 0x29, 0x60, 0x9E, 0x06, 0x9E, 0x5C, 0x8D},
		mac: []byte{0xD3, 0xEA, 0x73, 0x23, 0x41, 0x14, 0x3B, 0x64, 0x67, 0xC7, 0x13, 0x47, 0xF5, 0xE8, 0x0A, 0x29, 0x4B, 0x6A, 0xF2, 0x30, 0x92, 0x24, 0x1E, 0x9D, 0x46, 0x86, 0xF2, 0x23, 0xC8, 0xB7, 0x88, 0x11},
	},
	{
		key: []byte{0x4F, 0xBF, 0xFE, 0x1F, 0x35, 0x63, 0x7B, 0x24, 0xD9, 0x6F, 0x61, 0x67, 0x64, 0x0A, 0x1B, 0xE9, 0x03, 0x9F, 0xBF, 0x51, 0x91, 0x10, 0x22, 0x08, 0xAB, 0xE2, 0xBA, 0xA4, 0x73, 0x89, 0xAE, 0x3C},
		msg: []byte{0x06, 0xC1, 0x08, 0x1E, 0x5F, 0x57, 0xA9, 0xE6, 0x9C, 0x8E},
		mac: []byte{0x40, 0x04, 0xF1, 0x78, 0x29, 0x7D, 0xE3, 0xCF, 0x41, 0x60, 0x1F, 0x99, 0x6C, 0x44, 0x97, 0x47, 0x15, 0x06, 0x95, 0x38, 0x91, 0x5D, 0x2D, 0xCE, 0x71, 0xC7, 0xD5, 0x2F, 0x3F, 0x7C, 0xBD, 0x4F},
	},
}

/*

 */

func TestXoodyakMAC(t *testing.T) {
	for _, tt := range xoodyakMACTestTable {
		xkMAC := NewXoodyakMac(tt.key)
		xkMAC.Write(tt.msg)
		gotMAC := xkMAC.Sum(nil)
		assert.Equal(t, tt.mac, gotMAC)
		gotMAC = MACXoodyak(tt.key, tt.msg, uint(len(tt.mac)))
		assert.Equal(t, tt.mac, gotMAC)
	}

	// Very long strings of zeroes
	msg := make([]byte, 500)
	key := make([]byte, 16)
	mac := []byte{0xD4, 0xC3, 0xAD, 0xD8, 0x8C, 0x80, 0x1E, 0x6C, 0x66, 0x05, 0xD3, 0x13, 0xE1, 0xFB, 0x40, 0x0E, 0x1D, 0xEA, 0x57, 0xA1, 0xFA, 0x18, 0xFD, 0x83, 0xCE, 0x75, 0xEC, 0x91, 0x81, 0x94, 0xCC, 0xF9}
	xkMAC := NewXoodyakMac(key)
	xkMAC.Write(msg)
	gotMAC := xkMAC.Sum(nil)
	assert.Equal(t, mac, gotMAC)
	gotMAC = MACXoodyak(key, msg, uint(len(mac)))
	assert.Equal(t, mac, gotMAC)

	msg = make([]byte, 500)
	key = make([]byte, 32)
	mac = []byte{0x6A, 0xAD, 0x91, 0x24, 0xD0, 0x9B, 0xF0, 0xBD, 0x6A, 0x81, 0xD3, 0x9D, 0xCF, 0x89, 0xEC, 0x8E, 0xC8, 0x5B, 0x47, 0xF8, 0x1C, 0x77, 0x63, 0x80, 0x2A, 0x24, 0x36, 0xEF, 0x82, 0x6A, 0x86, 0x6E}
	xkMAC = NewXoodyakMac(key)
	xkMAC.Write(msg)
	gotMAC = xkMAC.Sum(nil)
	assert.Equal(t, mac, gotMAC)
	gotMAC = MACXoodyak(key, msg, uint(len(mac)))
	assert.Equal(t, mac, gotMAC)

	msg = make([]byte, 10000)
	key = make([]byte, 16)
	mac = []byte{0x63, 0x54, 0xF1, 0x49, 0x55, 0x19, 0x36, 0x85, 0xB0, 0x10, 0xB5, 0x8E, 0xBE, 0xE2, 0x15, 0xB2, 0x3D, 0x24, 0x9D, 0x34, 0x40, 0xDD, 0x9F, 0x37, 0x5D, 0xA1, 0xCF, 0xF9, 0x32, 0x2A, 0xA6, 0xEF}
	xkMAC = NewXoodyakMac(key)
	xkMAC.Write(msg)
	gotMAC = xkMAC.Sum(nil)
	assert.Equal(t, mac, gotMAC)
	gotMAC = MACXoodyak(key, msg, uint(len(mac)))
	assert.Equal(t, mac, gotMAC)

}
