package xoodyak

import (
	"bufio"
	"bytes"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
)

func BenchmarkHash(b *testing.B) {
	msg := make([]byte, 1024)
	for n := 0; n < b.N; n++ {
		HashXoodyak(msg)
	}
}

func BenchmarkCryptoHash(b *testing.B) {
	msg := make([]byte, 1024)
	for n := 0; n < b.N; n++ {
		cryptoHash(msg, 32)
	}
}

func BenchmarkHashInterface(b *testing.B) {
	msg := make([]byte, 1024)
	for n := 0; n < b.N; n++ {
		newMAC := NewXoodyakHash()
		newMAC.Write(msg)
		newMAC.Sum(nil)
	}
}

var cryptoHashBasicTestTable = []struct {
	input  []byte
	output []byte
}{
	{
		input:  []byte{0xe8, 0xc1, 0xaa, 0x6f, 0x91, 0x52, 0x70, 0x82, 0x32, 0xe5, 0x9b, 0xee, 0x46, 0xbc, 0x5c, 0xd2, 0xc5, 0xea, 0x4d, 0x10, 0xd0, 0xc5, 0xec, 0x11, 0x2d, 0x69, 0x56, 0x89, 0xe9, 0x06, 0xa9, 0xd5, 0x93, 0xab, 0x9f, 0x89, 0xa0, 0xf6, 0xce, 0x87, 0xd4, 0xcb, 0xd0, 0x7e, 0x0f, 0x72, 0x93, 0xd1, 0xd8, 0x6a, 0x3c, 0xff, 0x69, 0xc5, 0xb2, 0x50, 0x0f, 0x99, 0x91, 0x15, 0x82, 0x80, 0x14, 0x56, 0x3b, 0x78, 0xcd, 0x6c, 0x46, 0x54, 0xbc, 0x8b, 0x04, 0x6f, 0xbe, 0xb9, 0x06, 0xe4, 0x82, 0x7e, 0x48, 0xa7, 0xd8, 0x4f, 0x42, 0x0f, 0x97, 0x6d, 0xfa, 0x98, 0x73, 0xbf, 0x46, 0xac, 0xca, 0x33, 0x35, 0x0b, 0x39, 0x61, 0x10, 0xac, 0x71, 0x26, 0x26, 0x80, 0x55, 0x0e, 0x63, 0x04, 0x1b, 0xa1, 0x2b, 0x73, 0x03, 0x02, 0x16, 0xcb, 0x27, 0xf1, 0xf0, 0xff, 0x9a, 0xf9, 0x4d, 0x52, 0xc0, 0x19, 0x09, 0xb7, 0xaf, 0xfd, 0x19, 0xd9, 0xc6, 0xb8, 0xa5, 0x6a, 0xe0, 0x84, 0x1a},
		output: []byte{0x31, 0xBB, 0xE5, 0xE4, 0x74, 0x8A, 0x17, 0x0A, 0x50, 0x04, 0x33, 0xC7, 0x3D, 0x33, 0x59, 0xF4, 0x9E, 0x2D, 0x79, 0x2B, 0x84, 0x9B, 0x15, 0xD5, 0xFC, 0xE2, 0x70, 0xE4, 0x45, 0xCB, 0x7C, 0x09},
	},
	{
		input:  []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30},
		output: []byte{0xCC, 0xA2, 0x60, 0xC4, 0x94, 0x7D, 0xE5, 0xE6, 0xE1, 0x79, 0x6C, 0xDB, 0xF6, 0xA0, 0xC7, 0xE2, 0xDB, 0xBD, 0x2C, 0xEB, 0x6B, 0x80, 0x06, 0xB7, 0x20, 0xEA, 0x0A, 0x99, 0x61, 0xA3, 0x44, 0x91},
	},
	{
		input:  []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D},
		output: []byte{0x2A, 0x6C, 0x05, 0x77, 0x40, 0xF5, 0xC3, 0xCC, 0xBE, 0x06, 0x34, 0x19, 0x61, 0xAF, 0xFD, 0x0D, 0x88, 0xF5, 0x67, 0xCA, 0x48, 0x22, 0xB9, 0xF2, 0x18, 0x14, 0x20, 0x5D, 0xA7, 0xD3, 0xAA, 0xED},
	},
	{
		input:  []byte{},
		output: []byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1},
	},
}

func TestCryptoHashDoHash(t *testing.T) {
	for _, tt := range cryptoHashBasicTestTable {
		gotHash := HashXoodyak(tt.input)
		assert.Equal(t, tt.output, gotHash)
	}
}

func TestCryptoHashOfficialKAT(t *testing.T) {
	kat, err := os.Open("LWC_HASH_KAT_256.txt")
	assert.NoError(t, err)
	defer kat.Close()
	katBuf := bufio.NewReader(kat)

	var count int
	var message string
	var hash string

	for i := 1; i <= 1025; i++ {
		nextLine, _, err := katBuf.ReadLine()
		assert.NoError(t, err)
		fmt.Sscanf(string(nextLine), "Count = %d", &count)

		nextLine, _, err = katBuf.ReadLine()
		assert.NoError(t, err)
		fmt.Sscanf(string(nextLine), "Msg = %s", &message)
		msgBytes, err := hex.DecodeString(message)
		assert.NoError(t, err)

		nextLine, _, err = katBuf.ReadLine()
		assert.NoError(t, err)
		fmt.Sscanf(string(nextLine), "MD = %s", &hash)
		hashBytes, err := hex.DecodeString(hash)
		assert.NoError(t, err)

		gotHash := HashXoodyak(msgBytes)
		assert.Equal(t, hashBytes, gotHash)

		xkHash := NewXoodyakHash()
		gotLen, gotErr := xkHash.Write(msgBytes)
		assert.NoError(t, gotErr)
		assert.Equal(t, len(msgBytes), gotLen)
		gotHash = xkHash.Sum(nil)
		assert.Equal(t, hashBytes, gotHash)

		// Empty Line
		_, _, err = katBuf.ReadLine()
		assert.NoError(t, err)
	}
}

func TestXoodyakHashMode(t *testing.T) {
	for _, tt := range cryptoHashBasicTestTable {
		rd := bytes.NewBuffer(tt.input)
		newXk := NewXoodyakHash()
		gotWritten, err := io.Copy(newXk, rd)
		assert.Equal(t, int64(len(tt.input)), gotWritten)
		assert.NoError(t, err)
		gotHash := newXk.Sum(nil)
		assert.Equal(t, tt.output, gotHash)
	}
}

func TestXoodyakHashKATFile(t *testing.T) {
	hashKATfile := []byte{0x94, 0xF3, 0xB7, 0x04, 0xFA, 0x7D, 0x50, 0x34, 0x92, 0xA8, 0xD5, 0x4A, 0x77, 0xFB, 0x67, 0xB3, 0xBD, 0xD9, 0x8F, 0xF2, 0x17, 0xDE, 0x86, 0x1D, 0x2E, 0x7E, 0x7D, 0xD6, 0x08, 0xE6, 0x94, 0x8F}
	kat, err := os.Open("LWC_HASH_KAT_256.txt")
	assert.NoError(t, err)
	defer kat.Close()
	newXk := NewXoodyakHash()
	io.Copy(newXk, kat)
	gotHash := newXk.Sum(nil)
	assert.Equal(t, hashKATfile, gotHash)
}

func TestXoodyakHashWrite(t *testing.T) {

	newXk := NewXoodyakHash()
	bytes1 := make([]byte, 16)
	bytes2 := make([]byte, 8)
	bytes3 := make([]byte, 33)
	bytes4 := make([]byte, 7)
	bytes5 := make([]byte, 34)
	bytes6 := make([]byte, 15)

	gotNN1, err := newXk.Write(bytes1)
	assert.Equal(t, len(bytes1), gotNN1)
	assert.NoError(t, err)
	gotNN2, err := newXk.Write(bytes2)
	assert.Equal(t, len(bytes2), gotNN2)
	assert.NoError(t, err)
	gotNN3, err := newXk.Write(bytes3)
	assert.Equal(t, len(bytes3), gotNN3)
	assert.NoError(t, err)
	gotNN4, err := newXk.Write(bytes4)
	assert.Equal(t, len(bytes4), gotNN4)
	assert.NoError(t, err)
	gotNN5, err := newXk.Write(bytes5)
	assert.Equal(t, len(bytes5), gotNN5)
	assert.NoError(t, err)
	gotNN6, err := newXk.Write(bytes6)
	assert.Equal(t, len(bytes6), gotNN6)
	assert.NoError(t, err)

	gotHash := newXk.Sum(nil)
	calculatedHash := []byte{0xBD, 0x45, 0x5D, 0x88, 0xE9, 0xC6, 0xB7, 0x04, 0x74, 0x66, 0x69, 0x29, 0x36, 0x48, 0x96, 0xCE, 0x17, 0x8C, 0x94, 0x60, 0xE9, 0xC7, 0x85, 0x67, 0x7B, 0x80, 0x07, 0xE2, 0x5B, 0xD9, 0xA8, 0xD3}
	assert.Equal(t, calculatedHash, gotHash)
}

func TestXoodyakReset(t *testing.T) {
	emptyXooDyak := Instantiate([]byte{}, []byte{}, []byte{})
	newXk := NewXoodyakHash()
	newXk.Write([]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05})
	newXk.Sum(nil)
	dirtyDigest := newXk.(*digest)
	dirtyDigest.xk.Up(0x00, 10)
	assert.NotEqual(t, [16]byte{}, dirtyDigest.x)
	assert.NotEqual(t, emptyXooDyak.Instance.Bytes(), dirtyDigest.xk.Instance.Bytes())
	assert.NotEqual(t, emptyXooDyak.Phase, dirtyDigest.xk.Phase)
	assert.NotEqual(t, 0, dirtyDigest.nx)
	assert.NotEqual(t, AbsorbCdInit, dirtyDigest.absorbCd)
	newXk.Reset()
	cleanDigest := newXk.(*digest)
	assert.Equal(t, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, cleanDigest.x)
	assert.Equal(t, emptyXooDyak.Instance.Bytes(), cleanDigest.xk.Instance.Bytes())
	assert.Equal(t, emptyXooDyak.Phase, cleanDigest.xk.Phase)
	assert.Equal(t, 0, cleanDigest.nx)
	assert.Equal(t, AbsorbCdInit, cleanDigest.absorbCd)

}

func TestXoodyakHashSizes(t *testing.T) {
	newXk := NewXoodyakHash()
	assert.Equal(t, xoodyakHashIn, newXk.BlockSize())
	assert.Equal(t, cryptoHashBytes, newXk.Size())
}

var hashXoodyakLenTestTable = []struct {
	size uint
	in   []byte
	hash []byte
}{

	{
		size: 48,
		in:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		hash: []byte{0xC4, 0x06, 0xB5, 0x53, 0x65, 0xBE, 0x49, 0xDA, 0x53, 0xBA, 0x1A, 0xCD, 0xC9, 0xEE, 0x6B, 0xB4, 0x67, 0xAD, 0xFE, 0x31, 0x02, 0x38, 0xF7, 0x79, 0x32, 0x7D, 0x20, 0xD9, 0xBC, 0x4B, 0x01, 0x7E, 0xBA, 0x62, 0x4A, 0xF9, 0x15, 0x1B, 0x35, 0x8C, 0xA9, 0xE6, 0x40, 0x99, 0xE4, 0xE7, 0x1D, 0xB5},
	},
	{
		size: 48,
		in:   []byte{0x00, 0x01, 0x02},
		hash: []byte{0x72, 0xAB, 0xD3, 0x50, 0xDC, 0x28, 0x7E, 0x8C, 0x4B, 0x95, 0xDD, 0x37, 0xBD, 0x79, 0x6D, 0x79, 0xF9, 0x00, 0x26, 0xC1, 0xBD, 0x4E, 0x0D, 0x99, 0xD2, 0x11, 0x7B, 0xAA, 0xB2, 0x6B, 0xC2, 0xCA, 0xCB, 0x51, 0xEB, 0xAD, 0x65, 0x73, 0x68, 0xC0, 0x9E, 0x64, 0xD9, 0xE6, 0x6A, 0xEC, 0x8E, 0x36},
	},
	{
		size: 48,
		in:   []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30},
		hash: []byte{0xCC, 0xA2, 0x60, 0xC4, 0x94, 0x7D, 0xE5, 0xE6, 0xE1, 0x79, 0x6C, 0xDB, 0xF6, 0xA0, 0xC7, 0xE2, 0xDB, 0xBD, 0x2C, 0xEB, 0x6B, 0x80, 0x06, 0xB7, 0x20, 0xEA, 0x0A, 0x99, 0x61, 0xA3, 0x44, 0x91, 0x15, 0x91, 0xE5, 0xEC, 0xFC, 0xF3, 0xA9, 0xEE, 0xDD, 0x1D, 0x8A, 0x04, 0x67, 0x59, 0x7E, 0x8C},
	},
	{
		size: 48,
		in:   []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D},
		hash: []byte{0x2A, 0x6C, 0x05, 0x77, 0x40, 0xF5, 0xC3, 0xCC, 0xBE, 0x06, 0x34, 0x19, 0x61, 0xAF, 0xFD, 0x0D, 0x88, 0xF5, 0x67, 0xCA, 0x48, 0x22, 0xB9, 0xF2, 0x18, 0x14, 0x20, 0x5D, 0xA7, 0xD3, 0xAA, 0xED, 0x9E, 0xE4, 0xB6, 0x94, 0xE8, 0xEE, 0x04, 0x17, 0x44, 0x38, 0xAE, 0xA4, 0x4F, 0x50, 0x02, 0x7B},
	},
	{
		size: 48,
		in:   []byte{0xE8, 0xC1, 0xAA, 0x6F, 0x91, 0x52, 0x70, 0x82, 0x32, 0xE5, 0x9B, 0xEE, 0x46, 0xBC, 0x5C, 0xD2, 0xC5, 0xEA, 0x4D, 0x10, 0xD0, 0xC5, 0xEC, 0x11, 0x2D, 0x69, 0x56, 0x89, 0xE9, 0x06, 0xA9, 0xD5, 0x93, 0xAB, 0x9F, 0x89, 0xA0, 0xF6, 0xCE, 0x87, 0xD4, 0xCB, 0xD0, 0x7E, 0x0F, 0x72, 0x93, 0xD1, 0xD8, 0x6A, 0x3C, 0xFF, 0x69, 0xC5, 0xB2, 0x50, 0x0F, 0x99, 0x91, 0x15, 0x82, 0x80, 0x14, 0x56, 0x3B, 0x78, 0xCD, 0x6C, 0x46, 0x54, 0xBC, 0x8B, 0x04, 0x6F, 0xBE, 0xB9, 0x06, 0xE4, 0x82, 0x7E, 0x48, 0xA7, 0xD8, 0x4F, 0x42, 0x0F, 0x97, 0x6D, 0xFA, 0x98, 0x73, 0xBF, 0x46, 0xAC, 0xCA, 0x33, 0x35, 0x0B, 0x39, 0x61, 0x10, 0xAC, 0x71, 0x26, 0x26, 0x80, 0x55, 0x0E, 0x63, 0x04, 0x1B, 0xA1, 0x2B, 0x73, 0x03, 0x02, 0x16, 0xCB, 0x27, 0xF1, 0xF0, 0xFF, 0x9A, 0xF9, 0x4D, 0x52, 0xC0, 0x19, 0x09, 0xB7, 0xAF, 0xFD, 0x19, 0xD9, 0xC6, 0xB8, 0xA5, 0x6A, 0xE0, 0x84, 0x1A},
		hash: []byte{0x31, 0xBB, 0xE5, 0xE4, 0x74, 0x8A, 0x17, 0x0A, 0x50, 0x04, 0x33, 0xC7, 0x3D, 0x33, 0x59, 0xF4, 0x9E, 0x2D, 0x79, 0x2B, 0x84, 0x9B, 0x15, 0xD5, 0xFC, 0xE2, 0x70, 0xE4, 0x45, 0xCB, 0x7C, 0x09, 0xD0, 0x5B, 0x5B, 0x5A, 0x0C, 0x2C, 0x4C, 0x0E, 0x2B, 0xC8, 0xDE, 0x7D, 0x18, 0x47, 0x5B, 0xE6},
	},
	{
		size: 48,
		in:   []byte{},
		hash: []byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1, 0xFE, 0x89, 0x7C, 0x0A, 0x9A, 0xFE, 0xDB, 0x0B, 0xAA, 0xDD, 0x13, 0x8B, 0xDB, 0x7F, 0x32, 0xFB},
	},
	{
		size: 48,
		in:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		hash: []byte{0xBD, 0x45, 0x5D, 0x88, 0xE9, 0xC6, 0xB7, 0x04, 0x74, 0x66, 0x69, 0x29, 0x36, 0x48, 0x96, 0xCE, 0x17, 0x8C, 0x94, 0x60, 0xE9, 0xC7, 0x85, 0x67, 0x7B, 0x80, 0x07, 0xE2, 0x5B, 0xD9, 0xA8, 0xD3, 0xB5, 0x6D, 0x26, 0xEF, 0xFF, 0xEB, 0xAD, 0x60, 0x7C, 0xCB, 0xA9, 0xBF, 0xEC, 0x82, 0xE0, 0x64},
	},

	{
		size: 64,
		in:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		hash: []byte{0xC4, 0x06, 0xB5, 0x53, 0x65, 0xBE, 0x49, 0xDA, 0x53, 0xBA, 0x1A, 0xCD, 0xC9, 0xEE, 0x6B, 0xB4, 0x67, 0xAD, 0xFE, 0x31, 0x02, 0x38, 0xF7, 0x79, 0x32, 0x7D, 0x20, 0xD9, 0xBC, 0x4B, 0x01, 0x7E, 0xBA, 0x62, 0x4A, 0xF9, 0x15, 0x1B, 0x35, 0x8C, 0xA9, 0xE6, 0x40, 0x99, 0xE4, 0xE7, 0x1D, 0xB5, 0xC6, 0xF7, 0x3C, 0xAC, 0x88, 0xB6, 0x89, 0xF8, 0xFB, 0x72, 0xB2, 0xA1, 0xC8, 0x07, 0x24, 0xCD},
	},
	{
		size: 64,
		in:   []byte{0x00, 0x01, 0x02},
		hash: []byte{0x72, 0xAB, 0xD3, 0x50, 0xDC, 0x28, 0x7E, 0x8C, 0x4B, 0x95, 0xDD, 0x37, 0xBD, 0x79, 0x6D, 0x79, 0xF9, 0x00, 0x26, 0xC1, 0xBD, 0x4E, 0x0D, 0x99, 0xD2, 0x11, 0x7B, 0xAA, 0xB2, 0x6B, 0xC2, 0xCA, 0xCB, 0x51, 0xEB, 0xAD, 0x65, 0x73, 0x68, 0xC0, 0x9E, 0x64, 0xD9, 0xE6, 0x6A, 0xEC, 0x8E, 0x36, 0x58, 0x48, 0x04, 0x92, 0x83, 0x6E, 0x2C, 0xC0, 0x31, 0x83, 0xDD, 0x1F, 0xAA, 0xEC, 0x1B, 0xF1},
	},
	{
		size: 64,
		in:   []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30},
		hash: []byte{0xCC, 0xA2, 0x60, 0xC4, 0x94, 0x7D, 0xE5, 0xE6, 0xE1, 0x79, 0x6C, 0xDB, 0xF6, 0xA0, 0xC7, 0xE2, 0xDB, 0xBD, 0x2C, 0xEB, 0x6B, 0x80, 0x06, 0xB7, 0x20, 0xEA, 0x0A, 0x99, 0x61, 0xA3, 0x44, 0x91, 0x15, 0x91, 0xE5, 0xEC, 0xFC, 0xF3, 0xA9, 0xEE, 0xDD, 0x1D, 0x8A, 0x04, 0x67, 0x59, 0x7E, 0x8C, 0x69, 0x77, 0x5D, 0x2E, 0x17, 0xDB, 0xE7, 0x89, 0x44, 0x4B, 0xC8, 0x3E, 0x2D, 0x06, 0x82, 0x75},
	},
	{
		size: 64,
		in:   []byte{0xFE, 0x61, 0x20, 0xC4, 0x29, 0xA8, 0xBB, 0x7D},
		hash: []byte{0x2A, 0x6C, 0x05, 0x77, 0x40, 0xF5, 0xC3, 0xCC, 0xBE, 0x06, 0x34, 0x19, 0x61, 0xAF, 0xFD, 0x0D, 0x88, 0xF5, 0x67, 0xCA, 0x48, 0x22, 0xB9, 0xF2, 0x18, 0x14, 0x20, 0x5D, 0xA7, 0xD3, 0xAA, 0xED, 0x9E, 0xE4, 0xB6, 0x94, 0xE8, 0xEE, 0x04, 0x17, 0x44, 0x38, 0xAE, 0xA4, 0x4F, 0x50, 0x02, 0x7B, 0x68, 0x44, 0x17, 0xBF, 0x6C, 0xB4, 0x98, 0xC0, 0xA0, 0x77, 0xE4, 0xCD, 0x8D, 0x3D, 0xEB, 0x2A},
	},
	{
		size: 64,
		in:   []byte{0xE8, 0xC1, 0xAA, 0x6F, 0x91, 0x52, 0x70, 0x82, 0x32, 0xE5, 0x9B, 0xEE, 0x46, 0xBC, 0x5C, 0xD2, 0xC5, 0xEA, 0x4D, 0x10, 0xD0, 0xC5, 0xEC, 0x11, 0x2D, 0x69, 0x56, 0x89, 0xE9, 0x06, 0xA9, 0xD5, 0x93, 0xAB, 0x9F, 0x89, 0xA0, 0xF6, 0xCE, 0x87, 0xD4, 0xCB, 0xD0, 0x7E, 0x0F, 0x72, 0x93, 0xD1, 0xD8, 0x6A, 0x3C, 0xFF, 0x69, 0xC5, 0xB2, 0x50, 0x0F, 0x99, 0x91, 0x15, 0x82, 0x80, 0x14, 0x56, 0x3B, 0x78, 0xCD, 0x6C, 0x46, 0x54, 0xBC, 0x8B, 0x04, 0x6F, 0xBE, 0xB9, 0x06, 0xE4, 0x82, 0x7E, 0x48, 0xA7, 0xD8, 0x4F, 0x42, 0x0F, 0x97, 0x6D, 0xFA, 0x98, 0x73, 0xBF, 0x46, 0xAC, 0xCA, 0x33, 0x35, 0x0B, 0x39, 0x61, 0x10, 0xAC, 0x71, 0x26, 0x26, 0x80, 0x55, 0x0E, 0x63, 0x04, 0x1B, 0xA1, 0x2B, 0x73, 0x03, 0x02, 0x16, 0xCB, 0x27, 0xF1, 0xF0, 0xFF, 0x9A, 0xF9, 0x4D, 0x52, 0xC0, 0x19, 0x09, 0xB7, 0xAF, 0xFD, 0x19, 0xD9, 0xC6, 0xB8, 0xA5, 0x6A, 0xE0, 0x84, 0x1A},
		hash: []byte{0x31, 0xBB, 0xE5, 0xE4, 0x74, 0x8A, 0x17, 0x0A, 0x50, 0x04, 0x33, 0xC7, 0x3D, 0x33, 0x59, 0xF4, 0x9E, 0x2D, 0x79, 0x2B, 0x84, 0x9B, 0x15, 0xD5, 0xFC, 0xE2, 0x70, 0xE4, 0x45, 0xCB, 0x7C, 0x09, 0xD0, 0x5B, 0x5B, 0x5A, 0x0C, 0x2C, 0x4C, 0x0E, 0x2B, 0xC8, 0xDE, 0x7D, 0x18, 0x47, 0x5B, 0xE6, 0xE0, 0xED, 0x7C, 0x0D, 0x18, 0x1D, 0xA8, 0x8C, 0xBD, 0x91, 0x9F, 0x62, 0x11, 0xF2, 0x33, 0xDB},
	},
	{
		size: 64,
		in:   []byte{},
		hash: []byte{0xEA, 0x15, 0x2F, 0x2B, 0x47, 0xBC, 0xE2, 0x4E, 0xFB, 0x66, 0xC4, 0x79, 0xD4, 0xAD, 0xF1, 0x7B, 0xD3, 0x24, 0xD8, 0x06, 0xE8, 0x5F, 0xF7, 0x5E, 0xE3, 0x69, 0xEE, 0x50, 0xDC, 0x8F, 0x8B, 0xD1, 0xFE, 0x89, 0x7C, 0x0A, 0x9A, 0xFE, 0xDB, 0x0B, 0xAA, 0xDD, 0x13, 0x8B, 0xDB, 0x7F, 0x32, 0xFB, 0xFF, 0x39, 0xC6, 0xE8, 0xEB, 0x24, 0x61, 0x7B, 0x5A, 0x4E, 0xF3, 0x1B, 0xFA, 0xFD, 0xA8, 0xE2},
	},
	{
		size: 64,
		in:   []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		hash: []byte{0xBD, 0x45, 0x5D, 0x88, 0xE9, 0xC6, 0xB7, 0x04, 0x74, 0x66, 0x69, 0x29, 0x36, 0x48, 0x96, 0xCE, 0x17, 0x8C, 0x94, 0x60, 0xE9, 0xC7, 0x85, 0x67, 0x7B, 0x80, 0x07, 0xE2, 0x5B, 0xD9, 0xA8, 0xD3, 0xB5, 0x6D, 0x26, 0xEF, 0xFF, 0xEB, 0xAD, 0x60, 0x7C, 0xCB, 0xA9, 0xBF, 0xEC, 0x82, 0xE0, 0x64, 0xFC, 0x18, 0x06, 0xB5, 0xD6, 0x9B, 0x6D, 0x22, 0xB2, 0xBB, 0xE0, 0x1E, 0x9D, 0xC9, 0x9C, 0xD0},
	},
}

func TestHashXoodyakLen(t *testing.T) {
	for _, tt := range hashXoodyakLenTestTable {
		gotHash := HashXoodyakLen(tt.in, tt.size)
		assert.Equal(t, tt.hash, gotHash)
	}
}
